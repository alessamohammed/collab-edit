{"version":3,"file":"allows_wasm_worker_es.js","sources":["../src/bin/seal_allows_wasm_worker.js","../src/main/loader.ts","../src/implementation/batch-encoder.ts","../src/implementation/constants.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/allows_wasm_worker_es.ts","../src/main/seal.ts","../src/implementation/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\n\nvar f;f||(f=typeof Module !== 'undefined' ? Module : {});var aa,ba;f.ready=new Promise(function(a,b){aa=a;ba=b});var t={},w;for(w in f)f.hasOwnProperty(w)&&(t[w]=f[w]);var ca=\"./this.program\";function da(a,b){throw b;}var x=\"\",ea;x=self.location.href;_scriptDir&&(x=_scriptDir);0!==x.indexOf(\"blob:\")?x=x.substr(0,x.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):x=\"\";\nea=function(a){try{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}catch(c){if(a=fa(a))return a;throw c;}};var z=f.printErr||console.warn.bind(console);for(w in t)t.hasOwnProperty(w)&&(f[w]=t[w]);t=null;f.thisProgram&&(ca=f.thisProgram);f.quit&&(da=f.quit);var ha;f.wasmBinary&&(ha=f.wasmBinary);var noExitRuntime=f.noExitRuntime||!0;\"object\"!==typeof WebAssembly&&A(\"no native wasm support detected\");\nvar ja,ka=!1,la=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction ma(a,b){a>>>=0;if(a){var c=B;a>>>=0;var d=a+b;for(b=a;c[b>>>0]&&!(b>=d);)++b;if(16<b-a&&c.subarray&&la)c=la.decode(c.subarray(a>>>0,b>>>0));else{for(d=\"\";a<b;){var e=c[a++>>>0];if(e&128){var g=c[a++>>>0]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else{var l=c[a++>>>0]&63;e=224==(e&240)?(e&15)<<12|g<<6|l:(e&7)<<18|g<<12|l<<6|c[a++>>>0]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";\nreturn c}function na(a,b,c,d){c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var l=a.charCodeAt(++e);g=65536+((g&1023)<<10)|l&1023}if(127>=g){if(c>=d)break;b[c++>>>0]=g}else{if(2047>=g){if(c+1>=d)break;b[c++>>>0]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++>>>0]=224|g>>12}else{if(c+3>=d)break;b[c++>>>0]=240|g>>18;b[c++>>>0]=128|g>>12&63}b[c++>>>0]=128|g>>6&63}b[c++>>>0]=128|g&63}}b[c>>>0]=0}}\nfunction oa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}var pa=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function qa(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&ra[c>>>0];)++c;c<<=1;if(32<c-a&&pa)return pa.decode(B.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=C[a+2*d>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c}\nfunction sa(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1>>>0]=a.charCodeAt(e),b+=2;C[b>>1>>>0]=0;return b-d}function ta(a){return 2*a.length}function ua(a,b){for(var c=0,d=\"\";!(c>=b/4);){var e=D[a+4*c>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}\nfunction va(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var l=a.charCodeAt(++e);g=65536+((g&1023)<<10)|l&1023}D[b>>2>>>0]=g;b+=4;if(b+4>c)break}D[b>>2>>>0]=0;return b-d}function wa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var xa,E,B,C,ra,D,F,ya,za;\nfunction Aa(){var a=ja.buffer;xa=a;f.HEAP8=E=new Int8Array(a);f.HEAP16=C=new Int16Array(a);f.HEAP32=D=new Int32Array(a);f.HEAPU8=B=new Uint8Array(a);f.HEAPU16=ra=new Uint16Array(a);f.HEAPU32=F=new Uint32Array(a);f.HEAPF32=ya=new Float32Array(a);f.HEAPF64=za=new Float64Array(a)}var Ba,Ca=[],Da=[],Ea=[],Fa=[];function Ga(){var a=f.preRun.shift();Ca.unshift(a)}var G=0,Ha=null,Ia=null;f.preloadedImages={};f.preloadedAudios={};\nfunction A(a){if(f.onAbort)f.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ka=!0;a=new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");ba(a);throw a;}var Ja=\"data:application/octet-stream;base64,\",I;I=\"data:application/octet-stream;base64,\";if(!I.startsWith(Ja)){var Ka=I;I=f.locateFile?f.locateFile(Ka,x):x+Ka}function La(){var a=I;try{if(a==I&&ha)return new Uint8Array(ha);var b=fa(a);if(b)return b;if(ea)return ea(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){A(c)}}\nfunction Ma(){return ha||\"function\"!==typeof fetch?Promise.resolve().then(function(){return La()}):fetch(I,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+I+\"'\";return a.arrayBuffer()}).catch(function(){return La()})}function Na(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(f);else{var c=b.$a;\"number\"===typeof c?void 0===b.za?Oa(c)():Oa(c)(b.za):c(void 0===b.za?null:b.za)}}}var Pa=[];\nfunction Oa(a){var b=Pa[a];b||(a>=Pa.length&&(Pa.length=a+1),Pa[a]=b=Ba.get(a));return b}function Qa(a){this.da=a-16;this.Ua=function(b){D[this.da+4>>2>>>0]=b};this.Ra=function(b){D[this.da+8>>2>>>0]=b};this.Sa=function(){D[this.da>>2>>>0]=0};this.Qa=function(){E[this.da+12>>0>>>0]=0};this.Ta=function(){E[this.da+13>>0>>>0]=0};this.Ka=function(b,c){this.Ua(b);this.Ra(c);this.Sa();this.Qa();this.Ta()}}var Ra=0;\nfunction Sa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ta=void 0;function J(a){for(var b=\"\";B[a>>>0];)b+=Ta[B[a++>>>0]];return b}var K={},L={},Ua={};function Va(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}\nfunction Wa(a,b){a=Va(a);return(new Function(\"body\",\"return function \"+a+'() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n'))(b)}function Xa(a){var b=Error,c=Wa(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}\nvar M=void 0;function N(a){throw new M(a);}var Ya=void 0;function Za(a){throw new Ya(a);}function P(a,b,c){function d(k){k=c(k);k.length!==a.length&&Za(\"Mismatched type converter count\");for(var m=0;m<a.length;++m)Q(a[m],k[m])}a.forEach(function(k){Ua[k]=b});var e=Array(b.length),g=[],l=0;b.forEach(function(k,m){L.hasOwnProperty(k)?e[m]=L[k]:(g.push(k),K.hasOwnProperty(k)||(K[k]=[]),K[k].push(function(){e[m]=L[k];++l;l===g.length&&d(e)}))});0===g.length&&d(e)}\nfunction Q(a,b,c){c=c||{};if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||N('type \"'+d+'\" must have a positive integer typeid pointer');if(L.hasOwnProperty(a)){if(c.Ja)return;N(\"Cannot register type '\"+d+\"' twice\")}L[a]=b;delete Ua[a];K.hasOwnProperty(a)&&(b=K[a],delete K[a],b.forEach(function(e){e()}))}function $a(a){N(a.ba.ea.ca.name+\" instance already deleted\")}var ab=!1;function bb(){}\nfunction cb(a){--a.count.value;0===a.count.value&&(a.ha?a.ia.na(a.ha):a.ea.ca.na(a.da))}function db(a){if(\"undefined\"===typeof FinalizationRegistry)return db=function(b){return b},a;ab=new FinalizationRegistry(function(b){cb(b.ba)});db=function(b){ab.register(b,{ba:b.ba},b);return b};bb=function(b){ab.unregister(b)};return db(a)}var eb=void 0,fb=[];function gb(){for(;fb.length;){var a=fb.pop();a.ba.pa=!1;a[\"delete\"]()}}function R(){}var hb={};\nfunction ib(a,b,c){if(void 0===a[b].fa){var d=a[b];a[b]=function(){a[b].fa.hasOwnProperty(arguments.length)||N(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+a[b].fa+\")!\");return a[b].fa[arguments.length].apply(this,arguments)};a[b].fa=[];a[b].fa[d.oa]=d}}\nfunction jb(a,b,c){f.hasOwnProperty(a)?((void 0===c||void 0!==f[a].fa&&void 0!==f[a].fa[c])&&N(\"Cannot register public name '\"+a+\"' twice\"),ib(f,a,a),f.hasOwnProperty(c)&&N(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),f[a].fa[c]=b):(f[a]=b,void 0!==c&&(f[a].ab=c))}function kb(a,b,c,d,e,g,l,k){this.name=a;this.constructor=b;this.la=c;this.na=d;this.ja=e;this.Ha=g;this.ta=l;this.Ga=k;this.Na=[]}\nfunction lb(a,b,c){for(;b!==c;)b.ta||N(\"Expected null or instance of \"+c.name+\", got an instance of \"+b.name),a=b.ta(a),b=b.ja;return a}function mb(a,b){if(null===b)return this.Aa&&N(\"null is not a valid \"+this.name),0;b.ba||N('Cannot pass \"'+S(b)+'\" as a '+this.name);b.ba.da||N(\"Cannot pass deleted object as a pointer of type \"+this.name);return lb(b.ba.da,b.ba.ea.ca,this.ca)}\nfunction nb(a,b){if(null===b){this.Aa&&N(\"null is not a valid \"+this.name);if(this.va){var c=this.Oa();null!==a&&a.push(this.na,c);return c}return 0}b.ba||N('Cannot pass \"'+S(b)+'\" as a '+this.name);b.ba.da||N(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.ua&&b.ba.ea.ua&&N(\"Cannot convert argument of type \"+(b.ba.ia?b.ba.ia.name:b.ba.ea.name)+\" to parameter type \"+this.name);c=lb(b.ba.da,b.ba.ea.ca,this.ca);if(this.va)switch(void 0===b.ba.ha&&N(\"Passing raw pointer to smart pointer is illegal\"),\nthis.Va){case 0:b.ba.ia===this?c=b.ba.ha:N(\"Cannot convert argument of type \"+(b.ba.ia?b.ba.ia.name:b.ba.ea.name)+\" to parameter type \"+this.name);break;case 1:c=b.ba.ha;break;case 2:if(b.ba.ia===this)c=b.ba.ha;else{var d=b.clone();c=this.Pa(c,T(function(){d[\"delete\"]()}));null!==a&&a.push(this.na,c)}break;default:N(\"Unsupporting sharing policy\")}return c}\nfunction ob(a,b){if(null===b)return this.Aa&&N(\"null is not a valid \"+this.name),0;b.ba||N('Cannot pass \"'+S(b)+'\" as a '+this.name);b.ba.da||N(\"Cannot pass deleted object as a pointer of type \"+this.name);b.ba.ea.ua&&N(\"Cannot convert argument of type \"+b.ba.ea.name+\" to parameter type \"+this.name);return lb(b.ba.da,b.ba.ea.ca,this.ca)}function pb(a){return this.fromWireType(F[a>>>2])}function qb(a,b,c){if(b===c)return a;if(void 0===c.ja)return null;a=qb(a,b,c.ja);return null===a?null:c.Ga(a)}\nvar rb={};function sb(a,b){for(void 0===b&&N(\"ptr should not be undefined\");a.ja;)b=a.ta(b),a=a.ja;return rb[b]}function tb(a,b){b.ea&&b.da||Za(\"makeClassHandle requires ptr and ptrType\");!!b.ia!==!!b.ha&&Za(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return db(Object.create(a,{ba:{value:b}}))}\nfunction U(a,b,c,d){this.name=a;this.ca=b;this.Aa=c;this.ua=d;this.va=!1;this.na=this.Pa=this.Oa=this.Ea=this.Va=this.Ma=void 0;void 0!==b.ja?this.toWireType=nb:(this.toWireType=d?mb:ob,this.ka=null)}function ub(a,b,c){f.hasOwnProperty(a)||Za(\"Replacing nonexistant public symbol\");void 0!==f[a].fa&&void 0!==c?f[a].fa[c]=b:(f[a]=b,f[a].oa=c)}\nfunction vb(a,b){var c=[];return function(){c.length=arguments.length;for(var d=0;d<arguments.length;d++)c[d]=arguments[d];a.includes(\"j\")?(d=f[\"dynCall_\"+a],d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)):d=Oa(b).apply(null,c);return d}}function V(a,b){a=J(a);var c=a.includes(\"j\")?vb(a,b):Oa(b);\"function\"!==typeof c&&N(\"unknown function pointer with signature \"+a+\": \"+b);return c}var wb=void 0;function xb(a){a=yb(a);var b=J(a);W(a);return b}\nfunction X(a,b){function c(g){e[g]||L[g]||(Ua[g]?Ua[g].forEach(c):(d.push(g),e[g]=!0))}var d=[],e={};b.forEach(c);throw new wb(a+\": \"+d.map(xb).join([\", \"]));}function zb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Wa(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}function Ab(a){for(;a.length;){var b=a.pop();a.pop()(b)}}\nfunction Bb(a,b,c,d,e){var g=b.length;2>g&&N(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,k=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].ka){k=!0;break}var m=\"void\"!==b[0].name,p=\"\",n=\"\";for(c=0;c<g-2;++c)p+=(0!==c?\", \":\"\")+\"arg\"+c,n+=(0!==c?\", \":\"\")+\"arg\"+c+\"Wired\";a=\"return function \"+Va(a)+\"(\"+p+\") {\\nif (arguments.length !== \"+(g-2)+\") {\\nthrowBindingError('function \"+a+\" called with ' + arguments.length + ' arguments, expected \"+\n(g-2)+\" args!');\\n}\\n\";k&&(a+=\"var destructors = [];\\n\");var r=k?\"destructors\":\"null\";p=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");d=[N,d,e,Ab,b[0],b[1]];l&&(a+=\"var thisWired = classParam.toWireType(\"+r+\", this);\\n\");for(c=0;c<g-2;++c)a+=\"var arg\"+c+\"Wired = argType\"+c+\".toWireType(\"+r+\", arg\"+c+\"); // \"+b[c+2].name+\"\\n\",p.push(\"argType\"+c),d.push(b[c+2]);l&&(n=\"thisWired\"+(0<n.length?\", \":\"\")+n);a+=(m?\"var rv = \":\"\")+\"invoker(fn\"+(0<n.length?\", \":\"\")+n+\");\\n\";if(k)a+=\n\"runDestructors(destructors);\\n\";else for(c=l?1:2;c<b.length;++c)g=1===c?\"thisWired\":\"arg\"+(c-2)+\"Wired\",null!==b[c].ka&&(a+=g+\"_dtor(\"+g+\"); // \"+b[c].name+\"\\n\",p.push(g+\"_dtor\"),d.push(b[c].ka));m&&(a+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");p.push(a+\"}\\n\");return zb(p).apply(null,d)}function Cb(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d>>>0]);return c}\nfunction Db(a,b,c){a instanceof Object||N(c+' with invalid \"this\": '+a);a instanceof b.ca.constructor||N(c+' incompatible with \"this\" of type '+a.constructor.name);a.ba.da||N(\"cannot call emscripten binding method \"+c+\" on deleted object\");return lb(a.ba.da,a.ba.ea.ca,b.ca)}var Eb=[],Y=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Fb(a){4<a&&0===--Y[a].Ba&&(Y[a]=void 0,Eb.push(a))}function Z(a){a||N(\"Cannot use deleted val. handle = \"+a);return Y[a].value}\nfunction T(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Eb.length?Eb.pop():Y.length;Y[b]={Ba:1,value:a};return b}}function Hb(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?E:B)[d>>>0])};case 1:return function(d){return this.fromWireType((c?C:ra)[d>>>1])};case 2:return function(d){return this.fromWireType((c?D:F)[d>>>2])};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Ib(a,b){var c=L[a];void 0===c&&N(b+\" has unknown type \"+xb(a));return c}function S(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}function Jb(a,b){switch(b){case 2:return function(c){return this.fromWireType(ya[c>>>2])};case 3:return function(c){return this.fromWireType(za[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Kb(a,b,c){switch(b){case 0:return c?function(d){return E[d>>>0]}:function(d){return B[d>>>0]};case 1:return c?function(d){return C[d>>>1]}:function(d){return ra[d>>>1]};case 2:return c?function(d){return D[d>>>2]}:function(d){return F[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Lb={};function Mb(a){var b=Lb[a];return void 0===b?J(a):b}var Nb=[];function Ob(a){var b=Nb.length;Nb.push(a);return b}\nfunction Pb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=Ib(D[(b>>2)+d>>>0],\"parameter \"+d);return c}var Qb={};function Rb(){if(!Sb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in Qb)void 0===Qb[b]?delete a[b]:a[b]=Qb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Sb=c}return Sb}var Sb;\nfunction Tb(){if(\"object\"===typeof crypto&&\"function\"===typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}return function(){A(\"randomDevice\")}}function Ub(a,b){Ub.Da||(Ub.Da=Tb());for(var c=0;c<b;c++)E[a+c>>0>>>0]=Ub.Da();return 0}function Vb(a){return 0===a%4&&(0!==a%100||0===a%400)}function Wb(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}var Xb=[31,29,31,30,31,30,31,31,30,31,30,31],Yb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Zb(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(Vb(a.getFullYear())?Xb:Yb)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\nfunction $b(a,b,c,d){function e(h,q,v){for(h=\"number\"===typeof h?h.toString():h||\"\";h.length<q;)h=v[0]+h;return h}function g(h,q){return e(h,q,\"0\")}function l(h,q){function v(H){return 0>H?-1:0<H?1:0}var y;0===(y=v(h.getFullYear()-q.getFullYear()))&&0===(y=v(h.getMonth()-q.getMonth()))&&(y=v(h.getDate()-q.getDate()));return y}function k(h){switch(h.getDay()){case 0:return new Date(h.getFullYear()-1,11,29);case 1:return h;case 2:return new Date(h.getFullYear(),0,3);case 3:return new Date(h.getFullYear(),\n0,2);case 4:return new Date(h.getFullYear(),0,1);case 5:return new Date(h.getFullYear()-1,11,31);case 6:return new Date(h.getFullYear()-1,11,30)}}function m(h){h=Zb(new Date(h.ga+1900,0,1),h.ya);var q=new Date(h.getFullYear()+1,0,4),v=k(new Date(h.getFullYear(),0,4));q=k(q);return 0>=l(v,h)?0>=l(q,h)?h.getFullYear()+1:h.getFullYear():h.getFullYear()-1}var p=D[d+40>>2>>>0];d={Ya:D[d>>2>>>0],Xa:D[d+4>>2>>>0],wa:D[d+8>>2>>>0],sa:D[d+12>>2>>>0],qa:D[d+16>>2>>>0],ga:D[d+20>>2>>>0],xa:D[d+24>>2>>>0],ya:D[d+\n28>>2>>>0],bb:D[d+32>>2>>>0],Wa:D[d+36>>2>>>0],Za:p?ma(p):\"\"};c=ma(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var n in p)c=c.replace(new RegExp(n,\"g\"),p[n]);var r=\n\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(h){return r[h.xa].substring(0,3)},\"%A\":function(h){return r[h.xa]},\"%b\":function(h){return u[h.qa].substring(0,3)},\"%B\":function(h){return u[h.qa]},\"%C\":function(h){return g((h.ga+1900)/100|0,2)},\"%d\":function(h){return g(h.sa,2)},\"%e\":function(h){return e(h.sa,2,\" \")},\"%g\":function(h){return m(h).toString().substring(2)},\n\"%G\":function(h){return m(h)},\"%H\":function(h){return g(h.wa,2)},\"%I\":function(h){h=h.wa;0==h?h=12:12<h&&(h-=12);return g(h,2)},\"%j\":function(h){return g(h.sa+Wb(Vb(h.ga+1900)?Xb:Yb,h.qa-1),3)},\"%m\":function(h){return g(h.qa+1,2)},\"%M\":function(h){return g(h.Xa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(h){return 0<=h.wa&&12>h.wa?\"AM\":\"PM\"},\"%S\":function(h){return g(h.Ya,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(h){return h.xa||7},\"%U\":function(h){var q=new Date(h.ga+1900,0,1),v=0===q.getDay()?\nq:Zb(q,7-q.getDay());h=new Date(h.ga+1900,h.qa,h.sa);return 0>l(v,h)?g(Math.ceil((31-v.getDate()+(Wb(Vb(h.getFullYear())?Xb:Yb,h.getMonth()-1)-31)+h.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%V\":function(h){var q=new Date(h.ga+1901,0,4),v=k(new Date(h.ga+1900,0,4));q=k(q);var y=Zb(new Date(h.ga+1900,0,1),h.ya);return 0>l(y,v)?\"53\":0>=l(q,y)?\"01\":g(Math.ceil((v.getFullYear()<h.ga+1900?h.ya+32-v.getDate():h.ya+1-v.getDate())/7),2)},\"%w\":function(h){return h.xa},\"%W\":function(h){var q=new Date(h.ga,0,\n1),v=1===q.getDay()?q:Zb(q,0===q.getDay()?1:7-q.getDay()+1);h=new Date(h.ga+1900,h.qa,h.sa);return 0>l(v,h)?g(Math.ceil((31-v.getDate()+(Wb(Vb(h.getFullYear())?Xb:Yb,h.getMonth()-1)-31)+h.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%y\":function(h){return(h.ga+1900).toString().substring(2)},\"%Y\":function(h){return h.ga+1900},\"%z\":function(h){h=h.Wa;var q=0<=h;h=Math.abs(h)/60;return(q?\"+\":\"-\")+String(\"0000\"+(h/60*100+h%60)).slice(-4)},\"%Z\":function(h){return h.Za},\"%%\":function(){return\"%\"}};for(n in p)c.includes(n)&&\n(c=c.replace(new RegExp(n,\"g\"),p[n](d)));n=ac(c);if(n.length>b)return 0;E.set(n,a>>>0);return n.length-1}for(var bc=Array(256),cc=0;256>cc;++cc)bc[cc]=String.fromCharCode(cc);Ta=bc;M=f.BindingError=Xa(\"BindingError\");Ya=f.InternalError=Xa(\"InternalError\");R.prototype.isAliasOf=function(a){if(!(this instanceof R&&a instanceof R))return!1;var b=this.ba.ea.ca,c=this.ba.da,d=a.ba.ea.ca;for(a=a.ba.da;b.ja;)c=b.ta(c),b=b.ja;for(;d.ja;)a=d.ta(a),d=d.ja;return b===d&&c===a};\nR.prototype.clone=function(){this.ba.da||$a(this);if(this.ba.ra)return this.ba.count.value+=1,this;var a=db,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.ba;a=a(c.call(b,d,{ba:{value:{count:e.count,pa:e.pa,ra:e.ra,da:e.da,ea:e.ea,ha:e.ha,ia:e.ia}}}));a.ba.count.value+=1;a.ba.pa=!1;return a};R.prototype[\"delete\"]=function(){this.ba.da||$a(this);this.ba.pa&&!this.ba.ra&&N(\"Object already scheduled for deletion\");bb(this);cb(this.ba);this.ba.ra||(this.ba.ha=void 0,this.ba.da=void 0)};\nR.prototype.isDeleted=function(){return!this.ba.da};R.prototype.deleteLater=function(){this.ba.da||$a(this);this.ba.pa&&!this.ba.ra&&N(\"Object already scheduled for deletion\");fb.push(this);1===fb.length&&eb&&eb(gb);this.ba.pa=!0;return this};U.prototype.Ia=function(a){this.Ea&&(a=this.Ea(a));return a};U.prototype.Ca=function(a){this.na&&this.na(a)};U.prototype.argPackAdvance=8;U.prototype.readValueFromPointer=pb;U.prototype.deleteObject=function(a){if(null!==a)a[\"delete\"]()};\nU.prototype.fromWireType=function(a){function b(){return this.va?tb(this.ca.la,{ea:this.Ma,da:c,ia:this,ha:a}):tb(this.ca.la,{ea:this,da:a})}var c=this.Ia(a);if(!c)return this.Ca(a),null;var d=sb(this.ca,c);if(void 0!==d){if(0===d.ba.count.value)return d.ba.da=c,d.ba.ha=a,d.clone();d=d.clone();this.Ca(a);return d}d=this.ca.Ha(c);d=hb[d];if(!d)return b.call(this);d=this.ua?d.Fa:d.pointerType;var e=qb(c,this.ca,d.ca);return null===e?b.call(this):this.va?tb(d.ca.la,{ea:d,da:e,ia:this,ha:a}):tb(d.ca.la,\n{ea:d,da:e})};f.getInheritedInstanceCount=function(){return Object.keys(rb).length};f.getLiveInheritedInstances=function(){var a=[],b;for(b in rb)rb.hasOwnProperty(b)&&a.push(rb[b]);return a};f.flushPendingDeletes=gb;f.setDelayFunction=function(a){eb=a;fb.length&&eb&&eb(gb)};wb=f.UnboundTypeError=Xa(\"UnboundTypeError\");f.count_emval_handles=function(){for(var a=0,b=5;b<Y.length;++b)void 0!==Y[b]&&++a;return a};f.get_first_emval=function(){for(var a=5;a<Y.length;++a)if(void 0!==Y[a])return Y[a];return null};\nfunction ac(a){var b=Array(oa(a)+1);na(a,b,0,b.length);return b}\nvar dc=\"function\"===typeof atob?atob:function(a){var b=\"\",c=0;a=a.replace(/[^A-Za-z0-9\\+\\/=]/g,\"\");do{var d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var g=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));d=d<<2|e>>4;\ne=(e&15)<<4|g>>2;var k=(g&3)<<6|l;b+=String.fromCharCode(d);64!==g&&(b+=String.fromCharCode(e));64!==l&&(b+=String.fromCharCode(k))}while(c<a.length);return b};function fa(a){if(a.startsWith(Ja)){try{var b=dc(a.slice(Ja.length)),c=new Uint8Array(b.length);for(a=0;a<b.length;++a)c[a]=b.charCodeAt(a)}catch(d){throw Error(\"Converting base64 string to bytes failed.\");}return c}}\nvar fc={a:function(a){return ec(a+16)+16},b:function(a,b,c){(new Qa(a)).Ka(b,c);Ra++;throw a;},D:function(){},J:function(a,b,c,d,e){var g=Sa(c);b=J(b);Q(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=E;else if(2===c)k=C;else if(4===c)k=D;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>g])},ka:null})},e:function(a,b,c,d,e,g,l,k,m,p,n,r,u){n=J(n);g=V(e,g);k&&\n(k=V(l,k));p&&(p=V(m,p));u=V(r,u);var h=Va(n);jb(h,function(){X(\"Cannot construct \"+n+\" due to unbound types\",[d])});P([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.ca;var y=v.la}else y=R.prototype;q=Wa(h,function(){if(Object.getPrototypeOf(this)!==H)throw new M(\"Use 'new' to construct \"+n);if(void 0===O.ma)throw new M(n+\" has no accessible constructor\");var Gb=O.ma[arguments.length];if(void 0===Gb)throw new M(\"Tried to invoke ctor of \"+n+\" with invalid number of parameters (\"+arguments.length+\n\") - expected (\"+Object.keys(O.ma).toString()+\") parameters instead!\");return Gb.apply(this,arguments)});var H=Object.create(y,{constructor:{value:q}});q.prototype=H;var O=new kb(n,q,H,u,v,g,k,p);v=new U(n,O,!0,!1);y=new U(n+\"*\",O,!1,!1);var ia=new U(n+\" const*\",O,!1,!0);hb[a]={pointerType:y,Fa:ia};ub(h,q);return[v,y,ia]})},t:function(a,b,c,d,e,g,l){var k=Cb(c,d);b=J(b);g=V(e,g);P([],[a],function(m){function p(){X(\"Cannot call \"+n+\" due to unbound types\",k)}m=m[0];var n=m.name+\".\"+b;b.startsWith(\"@@\")&&\n(b=Symbol[b.substring(2)]);var r=m.ca.constructor;void 0===r[b]?(p.oa=c-1,r[b]=p):(ib(r,b,n),r[b].fa[c-1]=p);P([],k,function(u){u=Bb(n,[u[0],null].concat(u.slice(1)),null,g,l);void 0===r[b].fa?(u.oa=c-1,r[b]=u):r[b].fa[c-1]=u;return[]});return[]})},A:function(a,b,c,d,e,g,l,k){b=J(b);g=V(e,g);P([],[a],function(m){m=m[0];var p=m.name+\".\"+b,n={get:function(){X(\"Cannot access \"+p+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};n.set=k?function(){X(\"Cannot access \"+p+\" due to unbound types\",\n[c])}:function(){N(p+\" is a read-only property\")};Object.defineProperty(m.ca.constructor,b,n);P([],[c],function(r){r=r[0];var u={get:function(){return r.fromWireType(g(d))},enumerable:!0};k&&(k=V(l,k),u.set=function(h){var q=[];k(d,r.toWireType(q,h));Ab(q)});Object.defineProperty(m.ca.constructor,b,u);return[]});return[]})},f:function(a,b,c,d,e,g){0<b||A(\"Assertion failed: undefined\");var l=Cb(b,c);e=V(d,e);P([],[a],function(k){k=k[0];var m=\"constructor \"+k.name;void 0===k.ca.ma&&(k.ca.ma=[]);if(void 0!==\nk.ca.ma[b-1])throw new M(\"Cannot register multiple constructors with identical number of parameters (\"+(b-1)+\") for class '\"+k.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");k.ca.ma[b-1]=function(){X(\"Cannot construct \"+k.name+\" due to unbound types\",l)};P([],l,function(p){p.splice(1,0,null);k.ca.ma[b-1]=Bb(m,p,null,e,g);return[]});return[]})},c:function(a,b,c,d,e,g,l,k){var m=Cb(c,d);b=J(b);g=V(e,g);P([],[a],function(p){function n(){X(\"Cannot call \"+\nr+\" due to unbound types\",m)}p=p[0];var r=p.name+\".\"+b;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);k&&p.ca.Na.push(b);var u=p.ca.la,h=u[b];void 0===h||void 0===h.fa&&h.className!==p.name&&h.oa===c-2?(n.oa=c-2,n.className=p.name,u[b]=n):(ib(u,b,r),u[b].fa[c-2]=n);P([],m,function(q){q=Bb(r,q,p,g,l);void 0===u[b].fa?(q.oa=c-2,u[b]=q):u[b].fa[c-2]=q;return[]});return[]})},u:function(a,b,c,d,e,g,l,k,m,p){b=J(b);e=V(d,e);P([],[a],function(n){n=n[0];var r=n.name+\".\"+b,u={get:function(){X(\"Cannot access \"+\nr+\" due to unbound types\",[c,l])},enumerable:!0,configurable:!0};u.set=m?function(){X(\"Cannot access \"+r+\" due to unbound types\",[c,l])}:function(){N(r+\" is a read-only property\")};Object.defineProperty(n.ca.la,b,u);P([],m?[c,l]:[c],function(h){var q=h[0],v={get:function(){var H=Db(this,n,r+\" getter\");return q.fromWireType(e(g,H))},enumerable:!0};if(m){m=V(k,m);var y=h[1];v.set=function(H){var O=Db(this,n,r+\" setter\"),ia=[];m(p,O,y.toWireType(ia,H));Ab(ia)}}Object.defineProperty(n.ca.la,b,v);return[]});\nreturn[]})},C:function(a,b){b=J(b);Q(a,{name:b,fromWireType:function(c){var d=Z(c);Fb(c);return d},toWireType:function(c,d){return T(d)},argPackAdvance:8,readValueFromPointer:pb,ka:null})},w:function(a,b,c,d){function e(){}c=Sa(c);b=J(b);e.values={};Q(a,{name:b,constructor:e,fromWireType:function(g){return this.constructor.values[g]},toWireType:function(g,l){return l.value},argPackAdvance:8,readValueFromPointer:Hb(b,c,d),ka:null});jb(b,e)},r:function(a,b,c){var d=Ib(a,\"enum\");b=J(b);a=d.constructor;\nd=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Wa(d.name+\"_\"+b,function(){})}});a.values[c]=d;a[b]=d},z:function(a,b,c){c=Sa(c);b=J(b);Q(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){if(\"number\"!==typeof e&&\"boolean\"!==typeof e)throw new TypeError('Cannot convert \"'+S(e)+'\" to '+this.name);return e},argPackAdvance:8,readValueFromPointer:Jb(b,c),ka:null})},o:function(a,b,c,d,e,g){var l=Cb(b,c);a=J(a);e=V(d,e);jb(a,function(){X(\"Cannot call \"+a+\" due to unbound types\",\nl)},b-1);P([],l,function(k){ub(a,Bb(a,[k[0],null].concat(k.slice(1)),null,e,g),b-1);return[]})},s:function(a,b,c,d,e){function g(p){return p}b=J(b);-1===e&&(e=4294967295);var l=Sa(c);if(0===d){var k=32-8*c;g=function(p){return p<<k>>>k}}var m=b.includes(\"unsigned\");Q(a,{name:b,fromWireType:g,toWireType:function(p,n){if(\"number\"!==typeof n&&\"boolean\"!==typeof n)throw new TypeError('Cannot convert \"'+S(n)+'\" to '+this.name);if(n<d||n>e)throw new TypeError('Passing a number \"'+S(n)+'\" from JS side to C/C++ side to an argument of type \"'+\nb+'\", which is outside the valid range ['+d+\", \"+e+\"]!\");return m?n>>>0:n|0},argPackAdvance:8,readValueFromPointer:Kb(b,l,0!==d),ka:null})},p:function(a,b,c){function d(g){g>>=2;var l=F;return new e(xa,l[g+1>>>0],l[g>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=J(c);Q(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Ja:!0})},B:function(a,b){b=J(b);var c=\"std::string\"===b;Q(a,{name:b,fromWireType:function(d){var e=\nF[d>>>2];if(c)for(var g=d+4,l=0;l<=e;++l){var k=d+4+l;if(l==e||0==B[k>>>0]){g=ma(g,k-g);if(void 0===m)var m=g;else m+=String.fromCharCode(0),m+=g;g=k+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(B[d+4+l>>>0]);m=m.join(\"\")}W(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var g=\"string\"===typeof e;g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||N(\"Cannot pass non-string to std::string\");var l=(c&&g?function(){return oa(e)}:\nfunction(){return e.length})(),k=ec(4+l+1);k>>>=0;F[k>>>2]=l;if(c&&g)na(e,B,k+4,l+1);else if(g)for(g=0;g<l;++g){var m=e.charCodeAt(g);255<m&&(W(k),N(\"String has UTF-16 code units that do not fit in 8 bits\"));B[k+4+g>>>0]=m}else for(g=0;g<l;++g)B[k+4+g>>>0]=e[g];null!==d&&d.push(W,k);return k},argPackAdvance:8,readValueFromPointer:pb,ka:function(d){W(d)}})},x:function(a,b,c){c=J(c);if(2===b){var d=qa;var e=sa;var g=ta;var l=function(){return ra};var k=1}else 4===b&&(d=ua,e=va,g=wa,l=function(){return F},\nk=2);Q(a,{name:c,fromWireType:function(m){for(var p=F[m>>>2],n=l(),r,u=m+4,h=0;h<=p;++h){var q=m+4+h*b;if(h==p||0==n[q>>>k])u=d(u,q-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=q+b}W(m);return r},toWireType:function(m,p){\"string\"!==typeof p&&N(\"Cannot pass non-string to C++ string type \"+c);var n=g(p),r=ec(4+n+b);r>>>=0;F[r>>>2]=n>>k;e(p,r+4,n+b);null!==m&&m.push(W,r);return r},argPackAdvance:8,readValueFromPointer:pb,ka:function(m){W(m)}})},K:function(a,b){b=J(b);Q(a,{La:!0,name:b,argPackAdvance:0,\nfromWireType:function(){},toWireType:function(){}})},i:function(a,b,c){a=Z(a);b=Ib(b,\"emval::as\");var d=[],e=T(d);D[c>>>2]=e;return b.toWireType(d,a)},n:function(a,b,c,d){a=Nb[a];b=Z(b);c=Mb(c);a(b,c,null,d)},d:Fb,m:function(a,b){b=Pb(a,b);for(var c=b[0],d=c.name+\"_$\"+b.slice(1).map(function(p){return p.name}).join(\"_\")+\"$\",e=[\"retType\"],g=[c],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),g.push(b[1+k]);d=\"return function \"+Va(\"methodCaller_\"+d)+\"(handle, name, destructors, args) {\\n\";\nvar m=0;for(k=0;k<a-1;++k)d+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(m?\"+\"+m:\"\")+\");\\n\",m+=b[k+1].argPackAdvance;d+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)b[k+1].deleteObject&&(d+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");c.La||(d+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(d+\"};\\n\");a=zb(e).apply(null,g);return Ob(a)},j:function(a,b){a=Z(a);b=Z(b);return T(a[b])},k:function(a){4<a&&(Y[a].Ba+=1)},q:function(){return T([])},l:function(a){return T(Mb(a))},\nh:function(a){var b=Z(a);Ab(b);Fb(a)},g:function(a,b){a=Ib(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},y:function(){A(\"\")},I:function(a,b,c){B.copyWithin(a>>>0,b>>>0,b+c>>>0)},v:function(a){var b=B.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(a,d);0<d%65536&&(d+=65536-d%65536);a:{try{ja.grow(Math.min(4294901760,d)-xa.byteLength+65535>>>16);Aa();var e=1;break a}catch(g){}e=void 0}if(e)return!0}return!1},G:function(a,\nb){var c=0;Rb().forEach(function(d,e){var g=b+c;e=D[a+4*e>>2>>>0]=g;for(g=0;g<d.length;++g)E[e++>>0>>>0]=d.charCodeAt(g);E[e>>0>>>0]=0;c+=d.length+1});return 0},H:function(a,b){var c=Rb();D[a>>2>>>0]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});D[b>>2>>>0]=d;return 0},E:Ub,F:function(a,b,c,d){return $b(a,b,c,d)}};\n(function(){function a(e){f.asm=e.exports;ja=f.asm.L;Aa();Ba=f.asm.S;Da.unshift(f.asm.M);G--;f.monitorRunDependencies&&f.monitorRunDependencies(G);0==G&&(null!==Ha&&(clearInterval(Ha),Ha=null),Ia&&(e=Ia,Ia=null,e()))}function b(e){a(e.instance)}function c(e){return Ma().then(function(g){return WebAssembly.instantiate(g,d)}).then(function(g){return g}).then(e,function(g){z(\"failed to asynchronously prepare wasm: \"+g);A(g)})}var d={a:fc};G++;f.monitorRunDependencies&&f.monitorRunDependencies(G);if(f.instantiateWasm)try{return f.instantiateWasm(d,\na)}catch(e){return z(\"Module.instantiateWasm callback failed with error: \"+e),!1}(function(){return ha||\"function\"!==typeof WebAssembly.instantiateStreaming||I.startsWith(Ja)||\"function\"!==typeof fetch?c(b):fetch(I,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\nf.___wasm_call_ctors=function(){return(f.___wasm_call_ctors=f.asm.M).apply(null,arguments)};f._main=function(){return(f._main=f.asm.N).apply(null,arguments)};var yb=f.___getTypeName=function(){return(yb=f.___getTypeName=f.asm.O).apply(null,arguments)};f.___embind_register_native_and_builtin_types=function(){return(f.___embind_register_native_and_builtin_types=f.asm.P).apply(null,arguments)};\nvar ec=f._malloc=function(){return(ec=f._malloc=f.asm.Q).apply(null,arguments)},W=f._free=function(){return(W=f._free=f.asm.R).apply(null,arguments)};f.dynCall_viij=function(){return(f.dynCall_viij=f.asm.T).apply(null,arguments)};f.dynCall_viiij=function(){return(f.dynCall_viiij=f.asm.U).apply(null,arguments)};f.dynCall_iiiij=function(){return(f.dynCall_iiiij=f.asm.V).apply(null,arguments)};f.dynCall_vij=function(){return(f.dynCall_vij=f.asm.W).apply(null,arguments)};\nf.dynCall_iij=function(){return(f.dynCall_iij=f.asm.X).apply(null,arguments)};f.dynCall_iiij=function(){return(f.dynCall_iiij=f.asm.Y).apply(null,arguments)};f.dynCall_iiiiij=function(){return(f.dynCall_iiiiij=f.asm.Z).apply(null,arguments)};f.dynCall_iiiiijj=function(){return(f.dynCall_iiiiijj=f.asm._).apply(null,arguments)};f.dynCall_iiiiiijj=function(){return(f.dynCall_iiiiiijj=f.asm.$).apply(null,arguments)};f.dynCall_viijii=function(){return(f.dynCall_viijii=f.asm.aa).apply(null,arguments)};\nvar gc;function hc(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}Ia=function ic(){gc||jc();gc||(Ia=ic)};\nfunction jc(){function a(){if(!gc&&(gc=!0,f.calledRun=!0,!ka)){Na(Da);Na(Ea);aa(f);if(f.onRuntimeInitialized)f.onRuntimeInitialized();if(kc){var b=f._main;try{var c=b(0,0);if(!noExitRuntime){if(f.onExit)f.onExit(c);ka=!0}da(c,new hc(c))}catch(d){d instanceof hc||\"unwind\"==d||da(1,d)}finally{}}if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;)b=f.postRun.shift(),Fa.unshift(b);Na(Fa)}}if(!(0<G)){if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)Ga();\nNa(Ca);0<G||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){f.setStatus(\"\")},1);a()},1)):a())}}f.run=jc;if(f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();var kc=!0;f.noInitialRun&&(kc=!1);jc();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       *\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       *\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(encrypted.instance, plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(encrypted.instance, plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: BigInt): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: BigInt) => void\n  readonly value: BigInt\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: BigInt): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: BigInt) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: BigInt) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_allows_wasm_worker'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector\n  }\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","f","aa","ba","ready","Promise","a","b","w","t","hasOwnProperty","ca","da","ea","x","self","location","href","indexOf","substr","replace","lastIndexOf","XMLHttpRequest","open","responseType","send","Uint8Array","response","c","fa","ha","z","printErr","console","warn","bind","thisProgram","quit","wasmBinary","noExitRuntime","WebAssembly","A","ja","ka","la","TextDecoder","ma","B","d","subarray","decode","e","g","String","fromCharCode","l","na","length","charCodeAt","oa","xa","E","C","ra","D","F","ya","za","pa","qa","sa","ta","ua","va","wa","Aa","buffer","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","Ba","Ca","Da","Ea","Fa","Ga","preRun","shift","unshift","G","Ia","onAbort","RuntimeError","preloadedImages","preloadedAudios","I","Ja","startsWith","Ka","locateFile","La","Na","$a","Oa","Pa","get","Qa","this","Ua","Ra","Sa","Ta","TypeError","J","K","L","Va","Wa","Function","Xa","Error","name","message","stack","toString","prototype","Object","create","constructor","M","N","Ya","Za","P","k","m","Q","forEach","Array","push","ab","bb","cb","count","value","ia","db","FinalizationRegistry","unregister","register","eb","fb","gb","pop","R","hb","ib","arguments","apply","jb","kb","Ha","lb","mb","S","nb","clone","T","ob","pb","fromWireType","qb","rb","tb","U","Ma","toWireType","ub","V","includes","concat","call","vb","wb","xb","yb","W","X","map","join","zb","Ab","Bb","p","n","r","split","Cb","Db","Eb","Y","Fb","Z","Hb","Ib","Jb","Kb","Lb","Mb","Sb","Nb","Qb","Rb","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","Vb","Wb","Xb","Yb","Zb","Date","getTime","getMonth","getFullYear","getDate","setDate","setMonth","setFullYear","$b","h","q","v","H","y","getDay","ga","%c","%D","%F","%h","%r","%R","%T","%x","%X","%Ec","%EC","%Ex","%EX","%Ey","%EY","%Od","%Oe","%OH","%OI","%Om","%OM","%OS","%Ou","%OU","%OV","%Ow","%OW","%Oy","RegExp","u","%a","substring","%A","%b","%B","%C","%d","%e","%g","%G","%H","%I","%j","%m","%M","%n","%p","%S","%t","%u","%U","Math","ceil","%V","%w","%W","%y","%Y","%z","abs","slice","%Z","%%","ac","set","bc","cc","BindingError","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","argPackAdvance","readValueFromPointer","deleteObject","sb","pointerType","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","UnboundTypeError","count_emval_handles","get_first_emval","dc","atob","charAt","fc","ec","O","Gb","Symbol","enumerable","configurable","defineProperty","splice","className","values","o","s","ArrayBuffer","Uint8ClampedArray","i","Pb","Ob","j","copyWithin","min","max","grow","byteLength","Ub","crypto","getRandomValues","Tb","asm","exports","monitorRunDependencies","instance","fetch","resolve","then","credentials","ok","arrayBuffer","catch","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_main","___getTypeName","___embind_register_native_and_builtin_types","gc","_malloc","_free","hc","status","jc","calledRun","onRuntimeInitialized","kc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_iiiiij","dynCall_iiiiijj","dynCall_iiiiiijj","$","dynCall_viijii","ic","run","preInit","noInitialRun","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","[object Object]","delete","array","plainText","encode","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","unsafeInject","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","capacity","reserve","size","resize","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveToArray","encoded","loadFromString","loadFromArray","cipher","copy","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","cipherText","decrypt","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","coeffModulus","setCoeffModulus","plainModulus","setPlainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","temp","encryptSerializable","encryptSymmetric","serialized","encryptSymmetricSerializable","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","encrypted","destination","negate","add","sub","multiply","square","relinKeys","relinearize","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","exponent","exponentiate","addPlain","subPlain","multiplyPlain","destinationNtt","plainTransformToNtt","cipherTransformToNtt","encryptedNtt","cipherTransformFromNtt","galoisElt","galoisKeys","applyGalois","steps","rotateRows","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","EvaluatorConstructor","ExceptionInit","_getException","getException","error","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}