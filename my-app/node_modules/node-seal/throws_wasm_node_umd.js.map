{"version":3,"file":"throws_wasm_node_umd.js","sources":["../src/bin/seal_throws_wasm_node.js","../src/main/loader.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/throws_wasm_node_umd.ts","../src/main/seal.ts","../src/implementation/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(Module) {\n  Module = Module || {};\n\n\nvar f;f||(f=typeof Module !== 'undefined' ? Module : {});var aa,ba;f.ready=new Promise(function(a,b){aa=a;ba=b});var t={},w;for(w in f)f.hasOwnProperty(w)&&(t[w]=f[w]);var ca=\"./this.program\";function da(a,b){throw b;}var ea=\"\",ha,ia,ja,ka;ea=__dirname+\"/\";ha=function(a){var b=la(a);if(b)return b;ja||(ja=require(\"fs\"));ka||(ka=require(\"path\"));a=ka.normalize(a);return ja.readFileSync(a,null)};\nia=function(a){a=ha(a);a.buffer||(a=new Uint8Array(a));a.buffer||x(\"Assertion failed: undefined\");return a};1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);process.on(\"uncaughtException\",function(a){if(!(a instanceof ma))throw a;});process.on(\"unhandledRejection\",function(a){throw a;});da=function(a,b){if(noExitRuntime||0<na)throw process.exitCode=a,b;b instanceof ma||z(\"exiting due to exception: \"+b);process.exit(a)};f.inspect=function(){return\"[Emscripten Module object]\"};\nf.print||console.log.bind(console);var z=f.printErr||console.warn.bind(console);for(w in t)t.hasOwnProperty(w)&&(f[w]=t[w]);t=null;f.thisProgram&&(ca=f.thisProgram);f.quit&&(da=f.quit);var oa;f.wasmBinary&&(oa=f.wasmBinary);var noExitRuntime=f.noExitRuntime||!0;\"object\"!==typeof WebAssembly&&x(\"no native wasm support detected\");var pa,qa=!1,ra=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction sa(a,b){a>>>=0;if(a){var c=A;a>>>=0;var d=a+b;for(b=a;c[b>>>0]&&!(b>=d);)++b;if(16<b-a&&c.subarray&&ra)c=ra.decode(c.subarray(a>>>0,b>>>0));else{for(d=\"\";a<b;){var e=c[a++>>>0];if(e&128){var h=c[a++>>>0]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|h);else{var l=c[a++>>>0]&63;e=224==(e&240)?(e&15)<<12|h<<6|l:(e&7)<<18|h<<12|l<<6|c[a++>>>0]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";\nreturn c}function ta(a,b,c,d){c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var h=a.charCodeAt(e);if(55296<=h&&57343>=h){var l=a.charCodeAt(++e);h=65536+((h&1023)<<10)|l&1023}if(127>=h){if(c>=d)break;b[c++>>>0]=h}else{if(2047>=h){if(c+1>=d)break;b[c++>>>0]=192|h>>6}else{if(65535>=h){if(c+2>=d)break;b[c++>>>0]=224|h>>12}else{if(c+3>=d)break;b[c++>>>0]=240|h>>18;b[c++>>>0]=128|h>>12&63}b[c++>>>0]=128|h>>6&63}b[c++>>>0]=128|h&63}}b[c>>>0]=0}}\nfunction ua(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}var va=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function wa(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&B[c>>>0];)++c;c<<=1;if(32<c-a&&va)return va.decode(A.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=C[a+2*d>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c}\nfunction xa(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1>>>0]=a.charCodeAt(e),b+=2;C[b>>1>>>0]=0;return b-d}function ya(a){return 2*a.length}function za(a,b){for(var c=0,d=\"\";!(c>=b/4);){var e=D[a+4*c>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}\nfunction Aa(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var h=a.charCodeAt(e);if(55296<=h&&57343>=h){var l=a.charCodeAt(++e);h=65536+((h&1023)<<10)|l&1023}D[b>>2>>>0]=h;b+=4;if(b+4>c)break}D[b>>2>>>0]=0;return b-d}function Ba(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var Ca,E,A,C,B,D,F,Da,Ea;\nfunction Fa(){var a=pa.buffer;Ca=a;f.HEAP8=E=new Int8Array(a);f.HEAP16=C=new Int16Array(a);f.HEAP32=D=new Int32Array(a);f.HEAPU8=A=new Uint8Array(a);f.HEAPU16=B=new Uint16Array(a);f.HEAPU32=F=new Uint32Array(a);f.HEAPF32=Da=new Float32Array(a);f.HEAPF64=Ea=new Float64Array(a)}var Ga,Ha=[],Ia=[],Ja=[],Ka=[],na=0;function La(){var a=f.preRun.shift();Ha.unshift(a)}var H=0,Ma=null,Na=null;f.preloadedImages={};f.preloadedAudios={};\nfunction x(a){if(f.onAbort)f.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);qa=!0;a=new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");ba(a);throw a;}var Oa=\"data:application/octet-stream;base64,\",I;I=\"data:application/octet-stream;base64,\";if(!I.startsWith(Oa)){var Pa=I;I=f.locateFile?f.locateFile(Pa,ea):ea+Pa}function Qa(){var a=I;try{if(a==I&&oa)return new Uint8Array(oa);var b=la(a);if(b)return b;if(ia)return ia(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){x(c)}}\nfunction Ra(){return Promise.resolve().then(function(){return Qa()})}function Sa(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(f);else{var c=b.ab;\"number\"===typeof c?void 0===b.Aa?Ta(c)():Ta(c)(b.Aa):c(void 0===b.Aa?null:b.Aa)}}}var Ua=[];function Ta(a){var b=Ua[a];b||(a>=Ua.length&&(Ua.length=a+1),Ua[a]=b=Ga.get(a));return b}\nfunction Va(a){this.ea=a-16;this.Va=function(b){D[this.ea+4>>2>>>0]=b};this.Sa=function(b){D[this.ea+8>>2>>>0]=b};this.Ta=function(){D[this.ea>>2>>>0]=0};this.Ra=function(){E[this.ea+12>>0>>>0]=0};this.Ua=function(){E[this.ea+13>>0>>>0]=0};this.La=function(b,c){this.Va(b);this.Sa(c);this.Ta();this.Ra();this.Ua()}}var Wa=0;function Xa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ya=void 0;\nfunction J(a){for(var b=\"\";A[a>>>0];)b+=Ya[A[a++>>>0]];return b}var K={},L={},Za={};function $a(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function ab(a,b){a=$a(a);return(new Function(\"body\",\"return function \"+a+'() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n'))(b)}\nfunction bb(a){var b=Error,c=ab(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var M=void 0;function O(a){throw new M(a);}var cb=void 0;function db(a){throw new cb(a);}\nfunction P(a,b,c){function d(k){k=c(k);k.length!==a.length&&db(\"Mismatched type converter count\");for(var m=0;m<a.length;++m)Q(a[m],k[m])}a.forEach(function(k){Za[k]=b});var e=Array(b.length),h=[],l=0;b.forEach(function(k,m){L.hasOwnProperty(k)?e[m]=L[k]:(h.push(k),K.hasOwnProperty(k)||(K[k]=[]),K[k].push(function(){e[m]=L[k];++l;l===h.length&&d(e)}))});0===h.length&&d(e)}\nfunction Q(a,b,c){c=c||{};if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||O('type \"'+d+'\" must have a positive integer typeid pointer');if(L.hasOwnProperty(a)){if(c.Ka)return;O(\"Cannot register type '\"+d+\"' twice\")}L[a]=b;delete Za[a];K.hasOwnProperty(a)&&(b=K[a],delete K[a],b.forEach(function(e){e()}))}function eb(a){O(a.ba.fa.da.name+\" instance already deleted\")}var fb=!1;function gb(){}\nfunction hb(a){--a.count.value;0===a.count.value&&(a.ia?a.ja.oa(a.ia):a.fa.da.oa(a.ea))}function ib(a){if(\"undefined\"===typeof FinalizationRegistry)return ib=function(b){return b},a;fb=new FinalizationRegistry(function(b){hb(b.ba)});ib=function(b){fb.register(b,{ba:b.ba},b);return b};gb=function(b){fb.unregister(b)};return ib(a)}var jb=void 0,kb=[];function lb(){for(;kb.length;){var a=kb.pop();a.ba.qa=!1;a[\"delete\"]()}}function R(){}var mb={};\nfunction nb(a,b,c){if(void 0===a[b].ga){var d=a[b];a[b]=function(){a[b].ga.hasOwnProperty(arguments.length)||O(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+a[b].ga+\")!\");return a[b].ga[arguments.length].apply(this,arguments)};a[b].ga=[];a[b].ga[d.pa]=d}}\nfunction ob(a,b,c){f.hasOwnProperty(a)?((void 0===c||void 0!==f[a].ga&&void 0!==f[a].ga[c])&&O(\"Cannot register public name '\"+a+\"' twice\"),nb(f,a,a),f.hasOwnProperty(c)&&O(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),f[a].ga[c]=b):(f[a]=b,void 0!==c&&(f[a].bb=c))}function pb(a,b,c,d,e,h,l,k){this.name=a;this.constructor=b;this.ma=c;this.oa=d;this.ka=e;this.Ia=h;this.ua=l;this.Ha=k;this.Oa=[]}\nfunction qb(a,b,c){for(;b!==c;)b.ua||O(\"Expected null or instance of \"+c.name+\", got an instance of \"+b.name),a=b.ua(a),b=b.ka;return a}function rb(a,b){if(null===b)return this.Ba&&O(\"null is not a valid \"+this.name),0;b.ba||O('Cannot pass \"'+S(b)+'\" as a '+this.name);b.ba.ea||O(\"Cannot pass deleted object as a pointer of type \"+this.name);return qb(b.ba.ea,b.ba.fa.da,this.da)}\nfunction sb(a,b){if(null===b){this.Ba&&O(\"null is not a valid \"+this.name);if(this.wa){var c=this.Pa();null!==a&&a.push(this.oa,c);return c}return 0}b.ba||O('Cannot pass \"'+S(b)+'\" as a '+this.name);b.ba.ea||O(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.va&&b.ba.fa.va&&O(\"Cannot convert argument of type \"+(b.ba.ja?b.ba.ja.name:b.ba.fa.name)+\" to parameter type \"+this.name);c=qb(b.ba.ea,b.ba.fa.da,this.da);if(this.wa)switch(void 0===b.ba.ia&&O(\"Passing raw pointer to smart pointer is illegal\"),\nthis.Wa){case 0:b.ba.ja===this?c=b.ba.ia:O(\"Cannot convert argument of type \"+(b.ba.ja?b.ba.ja.name:b.ba.fa.name)+\" to parameter type \"+this.name);break;case 1:c=b.ba.ia;break;case 2:if(b.ba.ja===this)c=b.ba.ia;else{var d=b.clone();c=this.Qa(c,T(function(){d[\"delete\"]()}));null!==a&&a.push(this.oa,c)}break;default:O(\"Unsupporting sharing policy\")}return c}\nfunction tb(a,b){if(null===b)return this.Ba&&O(\"null is not a valid \"+this.name),0;b.ba||O('Cannot pass \"'+S(b)+'\" as a '+this.name);b.ba.ea||O(\"Cannot pass deleted object as a pointer of type \"+this.name);b.ba.fa.va&&O(\"Cannot convert argument of type \"+b.ba.fa.name+\" to parameter type \"+this.name);return qb(b.ba.ea,b.ba.fa.da,this.da)}function ub(a){return this.fromWireType(F[a>>>2])}function vb(a,b,c){if(b===c)return a;if(void 0===c.ka)return null;a=vb(a,b,c.ka);return null===a?null:c.Ha(a)}\nvar wb={};function xb(a,b){for(void 0===b&&O(\"ptr should not be undefined\");a.ka;)b=a.ua(b),a=a.ka;return wb[b]}function yb(a,b){b.fa&&b.ea||db(\"makeClassHandle requires ptr and ptrType\");!!b.ja!==!!b.ia&&db(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return ib(Object.create(a,{ba:{value:b}}))}\nfunction U(a,b,c,d){this.name=a;this.da=b;this.Ba=c;this.va=d;this.wa=!1;this.oa=this.Qa=this.Pa=this.Fa=this.Wa=this.Na=void 0;void 0!==b.ka?this.toWireType=sb:(this.toWireType=d?rb:tb,this.la=null)}function zb(a,b,c){f.hasOwnProperty(a)||db(\"Replacing nonexistant public symbol\");void 0!==f[a].ga&&void 0!==c?f[a].ga[c]=b:(f[a]=b,f[a].pa=c)}\nfunction Ab(a,b){var c=[];return function(){c.length=arguments.length;for(var d=0;d<arguments.length;d++)c[d]=arguments[d];a.includes(\"j\")?(d=f[\"dynCall_\"+a],d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)):d=Ta(b).apply(null,c);return d}}function V(a,b){a=J(a);var c=a.includes(\"j\")?Ab(a,b):Ta(b);\"function\"!==typeof c&&O(\"unknown function pointer with signature \"+a+\": \"+b);return c}var Bb=void 0;function Cb(a){a=Db(a);var b=J(a);W(a);return b}\nfunction X(a,b){function c(h){e[h]||L[h]||(Za[h]?Za[h].forEach(c):(d.push(h),e[h]=!0))}var d=[],e={};b.forEach(c);throw new Bb(a+\": \"+d.map(Cb).join([\", \"]));}function Eb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=ab(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}function Fb(a){for(;a.length;){var b=a.pop();a.pop()(b)}}\nfunction Gb(a,b,c,d,e){var h=b.length;2>h&&O(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,k=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].la){k=!0;break}var m=\"void\"!==b[0].name,p=\"\",n=\"\";for(c=0;c<h-2;++c)p+=(0!==c?\", \":\"\")+\"arg\"+c,n+=(0!==c?\", \":\"\")+\"arg\"+c+\"Wired\";a=\"return function \"+$a(a)+\"(\"+p+\") {\\nif (arguments.length !== \"+(h-2)+\") {\\nthrowBindingError('function \"+a+\" called with ' + arguments.length + ' arguments, expected \"+\n(h-2)+\" args!');\\n}\\n\";k&&(a+=\"var destructors = [];\\n\");var r=k?\"destructors\":\"null\";p=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");d=[O,d,e,Fb,b[0],b[1]];l&&(a+=\"var thisWired = classParam.toWireType(\"+r+\", this);\\n\");for(c=0;c<h-2;++c)a+=\"var arg\"+c+\"Wired = argType\"+c+\".toWireType(\"+r+\", arg\"+c+\"); // \"+b[c+2].name+\"\\n\",p.push(\"argType\"+c),d.push(b[c+2]);l&&(n=\"thisWired\"+(0<n.length?\", \":\"\")+n);a+=(m?\"var rv = \":\"\")+\"invoker(fn\"+(0<n.length?\", \":\"\")+n+\");\\n\";if(k)a+=\n\"runDestructors(destructors);\\n\";else for(c=l?1:2;c<b.length;++c)h=1===c?\"thisWired\":\"arg\"+(c-2)+\"Wired\",null!==b[c].la&&(a+=h+\"_dtor(\"+h+\"); // \"+b[c].name+\"\\n\",p.push(h+\"_dtor\"),d.push(b[c].la));m&&(a+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");p.push(a+\"}\\n\");return Eb(p).apply(null,d)}function Hb(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d>>>0]);return c}\nfunction Ib(a,b,c){a instanceof Object||O(c+' with invalid \"this\": '+a);a instanceof b.da.constructor||O(c+' incompatible with \"this\" of type '+a.constructor.name);a.ba.ea||O(\"cannot call emscripten binding method \"+c+\" on deleted object\");return qb(a.ba.ea,a.ba.fa.da,b.da)}var Jb=[],Y=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Lb(a){4<a&&0===--Y[a].Ca&&(Y[a]=void 0,Jb.push(a))}function Z(a){a||O(\"Cannot use deleted val. handle = \"+a);return Y[a].value}\nfunction T(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Jb.length?Jb.pop():Y.length;Y[b]={Ca:1,value:a};return b}}function Mb(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?E:A)[d>>>0])};case 1:return function(d){return this.fromWireType((c?C:B)[d>>>1])};case 2:return function(d){return this.fromWireType((c?D:F)[d>>>2])};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Nb(a,b){var c=L[a];void 0===c&&O(b+\" has unknown type \"+Cb(a));return c}function S(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}function Ob(a,b){switch(b){case 2:return function(c){return this.fromWireType(Da[c>>>2])};case 3:return function(c){return this.fromWireType(Ea[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Pb(a,b,c){switch(b){case 0:return c?function(d){return E[d>>>0]}:function(d){return A[d>>>0]};case 1:return c?function(d){return C[d>>>1]}:function(d){return B[d>>>1]};case 2:return c?function(d){return D[d>>>2]}:function(d){return F[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Qb={};function Rb(a){var b=Qb[a];return void 0===b?J(a):b}var Sb=[];function Tb(a){var b=Sb.length;Sb.push(a);return b}\nfunction Ub(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=Nb(D[(b>>2)+d>>>0],\"parameter \"+d);return c}var Vb={};function Wb(){if(!Xb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in Vb)void 0===Vb[b]?delete a[b]:a[b]=Vb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Xb=c}return Xb}var Xb;\nfunction Yb(){if(\"object\"===typeof crypto&&\"function\"===typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}try{var b=require(\"crypto\");return function(){return b.randomBytes(1)[0]}}catch(c){}return function(){x(\"randomDevice\")}}function Zb(a,b){Zb.Ea||(Zb.Ea=Yb());for(var c=0;c<b;c++)E[a+c>>0>>>0]=Zb.Ea();return 0}function $b(a){return 0===a%4&&(0!==a%100||0===a%400)}function ac(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}\nvar bc=[31,29,31,30,31,30,31,31,30,31,30,31],cc=[31,28,31,30,31,30,31,31,30,31,30,31];function dc(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=($b(a.getFullYear())?bc:cc)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\nfunction ec(a,b,c,d){function e(g,q,v){for(g=\"number\"===typeof g?g.toString():g||\"\";g.length<q;)g=v[0]+g;return g}function h(g,q){return e(g,q,\"0\")}function l(g,q){function v(G){return 0>G?-1:0<G?1:0}var y;0===(y=v(g.getFullYear()-q.getFullYear()))&&0===(y=v(g.getMonth()-q.getMonth()))&&(y=v(g.getDate()-q.getDate()));return y}function k(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function m(g){g=dc(new Date(g.ha+1900,0,1),g.za);var q=new Date(g.getFullYear()+1,0,4),v=k(new Date(g.getFullYear(),0,4));q=k(q);return 0>=l(v,g)?0>=l(q,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var p=D[d+40>>2>>>0];d={Za:D[d>>2>>>0],Ya:D[d+4>>2>>>0],xa:D[d+8>>2>>>0],ta:D[d+12>>2>>>0],ra:D[d+16>>2>>>0],ha:D[d+20>>2>>>0],ya:D[d+24>>2>>>0],za:D[d+\n28>>2>>>0],cb:D[d+32>>2>>>0],Xa:D[d+36>>2>>>0],$a:p?sa(p):\"\"};c=sa(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var n in p)c=c.replace(new RegExp(n,\"g\"),p[n]);var r=\n\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(g){return r[g.ya].substring(0,3)},\"%A\":function(g){return r[g.ya]},\"%b\":function(g){return u[g.ra].substring(0,3)},\"%B\":function(g){return u[g.ra]},\"%C\":function(g){return h((g.ha+1900)/100|0,2)},\"%d\":function(g){return h(g.ta,2)},\"%e\":function(g){return e(g.ta,2,\" \")},\"%g\":function(g){return m(g).toString().substring(2)},\n\"%G\":function(g){return m(g)},\"%H\":function(g){return h(g.xa,2)},\"%I\":function(g){g=g.xa;0==g?g=12:12<g&&(g-=12);return h(g,2)},\"%j\":function(g){return h(g.ta+ac($b(g.ha+1900)?bc:cc,g.ra-1),3)},\"%m\":function(g){return h(g.ra+1,2)},\"%M\":function(g){return h(g.Ya,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.xa&&12>g.xa?\"AM\":\"PM\"},\"%S\":function(g){return h(g.Za,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.ya||7},\"%U\":function(g){var q=new Date(g.ha+1900,0,1),v=0===q.getDay()?\nq:dc(q,7-q.getDay());g=new Date(g.ha+1900,g.ra,g.ta);return 0>l(v,g)?h(Math.ceil((31-v.getDate()+(ac($b(g.getFullYear())?bc:cc,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%V\":function(g){var q=new Date(g.ha+1901,0,4),v=k(new Date(g.ha+1900,0,4));q=k(q);var y=dc(new Date(g.ha+1900,0,1),g.za);return 0>l(y,v)?\"53\":0>=l(q,y)?\"01\":h(Math.ceil((v.getFullYear()<g.ha+1900?g.za+32-v.getDate():g.za+1-v.getDate())/7),2)},\"%w\":function(g){return g.ya},\"%W\":function(g){var q=new Date(g.ha,0,\n1),v=1===q.getDay()?q:dc(q,0===q.getDay()?1:7-q.getDay()+1);g=new Date(g.ha+1900,g.ra,g.ta);return 0>l(v,g)?h(Math.ceil((31-v.getDate()+(ac($b(g.getFullYear())?bc:cc,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%y\":function(g){return(g.ha+1900).toString().substring(2)},\"%Y\":function(g){return g.ha+1900},\"%z\":function(g){g=g.Xa;var q=0<=g;g=Math.abs(g)/60;return(q?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.$a},\"%%\":function(){return\"%\"}};for(n in p)c.includes(n)&&\n(c=c.replace(new RegExp(n,\"g\"),p[n](d)));n=fc(c);if(n.length>b)return 0;E.set(n,a>>>0);return n.length-1}for(var gc=Array(256),hc=0;256>hc;++hc)gc[hc]=String.fromCharCode(hc);Ya=gc;M=f.BindingError=bb(\"BindingError\");cb=f.InternalError=bb(\"InternalError\");R.prototype.isAliasOf=function(a){if(!(this instanceof R&&a instanceof R))return!1;var b=this.ba.fa.da,c=this.ba.ea,d=a.ba.fa.da;for(a=a.ba.ea;b.ka;)c=b.ua(c),b=b.ka;for(;d.ka;)a=d.ua(a),d=d.ka;return b===d&&c===a};\nR.prototype.clone=function(){this.ba.ea||eb(this);if(this.ba.sa)return this.ba.count.value+=1,this;var a=ib,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.ba;a=a(c.call(b,d,{ba:{value:{count:e.count,qa:e.qa,sa:e.sa,ea:e.ea,fa:e.fa,ia:e.ia,ja:e.ja}}}));a.ba.count.value+=1;a.ba.qa=!1;return a};R.prototype[\"delete\"]=function(){this.ba.ea||eb(this);this.ba.qa&&!this.ba.sa&&O(\"Object already scheduled for deletion\");gb(this);hb(this.ba);this.ba.sa||(this.ba.ia=void 0,this.ba.ea=void 0)};\nR.prototype.isDeleted=function(){return!this.ba.ea};R.prototype.deleteLater=function(){this.ba.ea||eb(this);this.ba.qa&&!this.ba.sa&&O(\"Object already scheduled for deletion\");kb.push(this);1===kb.length&&jb&&jb(lb);this.ba.qa=!0;return this};U.prototype.Ja=function(a){this.Fa&&(a=this.Fa(a));return a};U.prototype.Da=function(a){this.oa&&this.oa(a)};U.prototype.argPackAdvance=8;U.prototype.readValueFromPointer=ub;U.prototype.deleteObject=function(a){if(null!==a)a[\"delete\"]()};\nU.prototype.fromWireType=function(a){function b(){return this.wa?yb(this.da.ma,{fa:this.Na,ea:c,ja:this,ia:a}):yb(this.da.ma,{fa:this,ea:a})}var c=this.Ja(a);if(!c)return this.Da(a),null;var d=xb(this.da,c);if(void 0!==d){if(0===d.ba.count.value)return d.ba.ea=c,d.ba.ia=a,d.clone();d=d.clone();this.Da(a);return d}d=this.da.Ia(c);d=mb[d];if(!d)return b.call(this);d=this.va?d.Ga:d.pointerType;var e=vb(c,this.da,d.da);return null===e?b.call(this):this.wa?yb(d.da.ma,{fa:d,ea:e,ja:this,ia:a}):yb(d.da.ma,\n{fa:d,ea:e})};f.getInheritedInstanceCount=function(){return Object.keys(wb).length};f.getLiveInheritedInstances=function(){var a=[],b;for(b in wb)wb.hasOwnProperty(b)&&a.push(wb[b]);return a};f.flushPendingDeletes=lb;f.setDelayFunction=function(a){jb=a;kb.length&&jb&&jb(lb)};Bb=f.UnboundTypeError=bb(\"UnboundTypeError\");f.count_emval_handles=function(){for(var a=0,b=5;b<Y.length;++b)void 0!==Y[b]&&++a;return a};f.get_first_emval=function(){for(var a=5;a<Y.length;++a)if(void 0!==Y[a])return Y[a];return null};\nfunction fc(a){var b=Array(ua(a)+1);ta(a,b,0,b.length);return b}function la(a){if(a.startsWith(Oa))return a=a.slice(Oa.length),a=Buffer.from(a,\"base64\"),new Uint8Array(a.buffer,a.byteOffset,a.byteLength)}\nvar jc={a:function(a){return ic(a+16)+16},b:function(a,b,c){(new Va(a)).La(b,c);Wa++;throw a;},D:function(){},J:function(a,b,c,d,e){var h=Xa(c);b=J(b);Q(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=E;else if(2===c)k=C;else if(4===c)k=D;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>h])},la:null})},e:function(a,b,c,d,e,h,l,k,m,p,n,r,u){n=J(n);h=V(e,h);k&&\n(k=V(l,k));p&&(p=V(m,p));u=V(r,u);var g=$a(n);ob(g,function(){X(\"Cannot construct \"+n+\" due to unbound types\",[d])});P([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.da;var y=v.ma}else y=R.prototype;q=ab(g,function(){if(Object.getPrototypeOf(this)!==G)throw new M(\"Use 'new' to construct \"+n);if(void 0===N.na)throw new M(n+\" has no accessible constructor\");var Kb=N.na[arguments.length];if(void 0===Kb)throw new M(\"Tried to invoke ctor of \"+n+\" with invalid number of parameters (\"+arguments.length+\n\") - expected (\"+Object.keys(N.na).toString()+\") parameters instead!\");return Kb.apply(this,arguments)});var G=Object.create(y,{constructor:{value:q}});q.prototype=G;var N=new pb(n,q,G,u,v,h,k,p);v=new U(n,N,!0,!1);y=new U(n+\"*\",N,!1,!1);var fa=new U(n+\" const*\",N,!1,!0);mb[a]={pointerType:y,Ga:fa};zb(g,q);return[v,y,fa]})},t:function(a,b,c,d,e,h,l){var k=Hb(c,d);b=J(b);h=V(e,h);P([],[a],function(m){function p(){X(\"Cannot call \"+n+\" due to unbound types\",k)}m=m[0];var n=m.name+\".\"+b;b.startsWith(\"@@\")&&\n(b=Symbol[b.substring(2)]);var r=m.da.constructor;void 0===r[b]?(p.pa=c-1,r[b]=p):(nb(r,b,n),r[b].ga[c-1]=p);P([],k,function(u){u=[u[0],null].concat(u.slice(1));u=Gb(n,u,null,h,l);void 0===r[b].ga?(u.pa=c-1,r[b]=u):r[b].ga[c-1]=u;return[]});return[]})},A:function(a,b,c,d,e,h,l,k){b=J(b);h=V(e,h);P([],[a],function(m){m=m[0];var p=m.name+\".\"+b,n={get:function(){X(\"Cannot access \"+p+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};n.set=k?function(){X(\"Cannot access \"+p+\" due to unbound types\",\n[c])}:function(){O(p+\" is a read-only property\")};Object.defineProperty(m.da.constructor,b,n);P([],[c],function(r){r=r[0];var u={get:function(){return r.fromWireType(h(d))},enumerable:!0};k&&(k=V(l,k),u.set=function(g){var q=[];k(d,r.toWireType(q,g));Fb(q)});Object.defineProperty(m.da.constructor,b,u);return[]});return[]})},f:function(a,b,c,d,e,h){0<b||x(\"Assertion failed: undefined\");var l=Hb(b,c);e=V(d,e);P([],[a],function(k){k=k[0];var m=\"constructor \"+k.name;void 0===k.da.na&&(k.da.na=[]);if(void 0!==\nk.da.na[b-1])throw new M(\"Cannot register multiple constructors with identical number of parameters (\"+(b-1)+\") for class '\"+k.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");k.da.na[b-1]=function(){X(\"Cannot construct \"+k.name+\" due to unbound types\",l)};P([],l,function(p){p.splice(1,0,null);k.da.na[b-1]=Gb(m,p,null,e,h);return[]});return[]})},c:function(a,b,c,d,e,h,l,k){var m=Hb(c,d);b=J(b);h=V(e,h);P([],[a],function(p){function n(){X(\"Cannot call \"+\nr+\" due to unbound types\",m)}p=p[0];var r=p.name+\".\"+b;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);k&&p.da.Oa.push(b);var u=p.da.ma,g=u[b];void 0===g||void 0===g.ga&&g.className!==p.name&&g.pa===c-2?(n.pa=c-2,n.className=p.name,u[b]=n):(nb(u,b,r),u[b].ga[c-2]=n);P([],m,function(q){q=Gb(r,q,p,h,l);void 0===u[b].ga?(q.pa=c-2,u[b]=q):u[b].ga[c-2]=q;return[]});return[]})},u:function(a,b,c,d,e,h,l,k,m,p){b=J(b);e=V(d,e);P([],[a],function(n){n=n[0];var r=n.name+\".\"+b,u={get:function(){X(\"Cannot access \"+\nr+\" due to unbound types\",[c,l])},enumerable:!0,configurable:!0};u.set=m?function(){X(\"Cannot access \"+r+\" due to unbound types\",[c,l])}:function(){O(r+\" is a read-only property\")};Object.defineProperty(n.da.ma,b,u);P([],m?[c,l]:[c],function(g){var q=g[0],v={get:function(){var G=Ib(this,n,r+\" getter\");return q.fromWireType(e(h,G))},enumerable:!0};if(m){m=V(k,m);var y=g[1];v.set=function(G){var N=Ib(this,n,r+\" setter\"),fa=[];m(p,N,y.toWireType(fa,G));Fb(fa)}}Object.defineProperty(n.da.ma,b,v);return[]});\nreturn[]})},C:function(a,b){b=J(b);Q(a,{name:b,fromWireType:function(c){var d=Z(c);Lb(c);return d},toWireType:function(c,d){return T(d)},argPackAdvance:8,readValueFromPointer:ub,la:null})},w:function(a,b,c,d){function e(){}c=Xa(c);b=J(b);e.values={};Q(a,{name:b,constructor:e,fromWireType:function(h){return this.constructor.values[h]},toWireType:function(h,l){return l.value},argPackAdvance:8,readValueFromPointer:Mb(b,c,d),la:null});ob(b,e)},r:function(a,b,c){var d=Nb(a,\"enum\");b=J(b);a=d.constructor;\nd=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:ab(d.name+\"_\"+b,function(){})}});a.values[c]=d;a[b]=d},z:function(a,b,c){c=Xa(c);b=J(b);Q(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){if(\"number\"!==typeof e&&\"boolean\"!==typeof e)throw new TypeError('Cannot convert \"'+S(e)+'\" to '+this.name);return e},argPackAdvance:8,readValueFromPointer:Ob(b,c),la:null})},o:function(a,b,c,d,e,h){var l=Hb(b,c);a=J(a);e=V(d,e);ob(a,function(){X(\"Cannot call \"+a+\" due to unbound types\",\nl)},b-1);P([],l,function(k){k=[k[0],null].concat(k.slice(1));zb(a,Gb(a,k,null,e,h),b-1);return[]})},s:function(a,b,c,d,e){function h(p){return p}b=J(b);-1===e&&(e=4294967295);var l=Xa(c);if(0===d){var k=32-8*c;h=function(p){return p<<k>>>k}}var m=b.includes(\"unsigned\");Q(a,{name:b,fromWireType:h,toWireType:function(p,n){if(\"number\"!==typeof n&&\"boolean\"!==typeof n)throw new TypeError('Cannot convert \"'+S(n)+'\" to '+this.name);if(n<d||n>e)throw new TypeError('Passing a number \"'+S(n)+'\" from JS side to C/C++ side to an argument of type \"'+\nb+'\", which is outside the valid range ['+d+\", \"+e+\"]!\");return m?n>>>0:n|0},argPackAdvance:8,readValueFromPointer:Pb(b,l,0!==d),la:null})},p:function(a,b,c){function d(h){h>>=2;var l=F;return new e(Ca,l[h+1>>>0],l[h>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=J(c);Q(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Ka:!0})},B:function(a,b){b=J(b);var c=\"std::string\"===b;Q(a,{name:b,fromWireType:function(d){var e=\nF[d>>>2];if(c)for(var h=d+4,l=0;l<=e;++l){var k=d+4+l;if(l==e||0==A[k>>>0]){h=sa(h,k-h);if(void 0===m)var m=h;else m+=String.fromCharCode(0),m+=h;h=k+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(A[d+4+l>>>0]);m=m.join(\"\")}W(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var h=\"string\"===typeof e;h||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||O(\"Cannot pass non-string to std::string\");var l=(c&&h?function(){return ua(e)}:\nfunction(){return e.length})(),k=ic(4+l+1);k>>>=0;F[k>>>2]=l;if(c&&h)ta(e,A,k+4,l+1);else if(h)for(h=0;h<l;++h){var m=e.charCodeAt(h);255<m&&(W(k),O(\"String has UTF-16 code units that do not fit in 8 bits\"));A[k+4+h>>>0]=m}else for(h=0;h<l;++h)A[k+4+h>>>0]=e[h];null!==d&&d.push(W,k);return k},argPackAdvance:8,readValueFromPointer:ub,la:function(d){W(d)}})},x:function(a,b,c){c=J(c);if(2===b){var d=wa;var e=xa;var h=ya;var l=function(){return B};var k=1}else 4===b&&(d=za,e=Aa,h=Ba,l=function(){return F},\nk=2);Q(a,{name:c,fromWireType:function(m){for(var p=F[m>>>2],n=l(),r,u=m+4,g=0;g<=p;++g){var q=m+4+g*b;if(g==p||0==n[q>>>k])u=d(u,q-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=q+b}W(m);return r},toWireType:function(m,p){\"string\"!==typeof p&&O(\"Cannot pass non-string to C++ string type \"+c);var n=h(p),r=ic(4+n+b);r>>>=0;F[r>>>2]=n>>k;e(p,r+4,n+b);null!==m&&m.push(W,r);return r},argPackAdvance:8,readValueFromPointer:ub,la:function(m){W(m)}})},K:function(a,b){b=J(b);Q(a,{Ma:!0,name:b,argPackAdvance:0,\nfromWireType:function(){},toWireType:function(){}})},i:function(a,b,c){a=Z(a);b=Nb(b,\"emval::as\");var d=[],e=T(d);D[c>>>2]=e;return b.toWireType(d,a)},n:function(a,b,c,d){a=Sb[a];b=Z(b);c=Rb(c);a(b,c,null,d)},d:Lb,m:function(a,b){b=Ub(a,b);for(var c=b[0],d=c.name+\"_$\"+b.slice(1).map(function(p){return p.name}).join(\"_\")+\"$\",e=[\"retType\"],h=[c],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),h.push(b[1+k]);d=\"return function \"+$a(\"methodCaller_\"+d)+\"(handle, name, destructors, args) {\\n\";\nvar m=0;for(k=0;k<a-1;++k)d+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(m?\"+\"+m:\"\")+\");\\n\",m+=b[k+1].argPackAdvance;d+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)b[k+1].deleteObject&&(d+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");c.Ma||(d+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(d+\"};\\n\");a=Eb(e).apply(null,h);return Tb(a)},j:function(a,b){a=Z(a);b=Z(b);return T(a[b])},k:function(a){4<a&&(Y[a].Ca+=1)},q:function(){return T([])},l:function(a){return T(Rb(a))},\nh:function(a){var b=Z(a);Fb(b);Lb(a)},g:function(a,b){a=Nb(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},y:function(){x(\"\")},I:function(a,b,c){A.copyWithin(a>>>0,b>>>0,b+c>>>0)},v:function(a){var b=A.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(a,d);0<d%65536&&(d+=65536-d%65536);a:{try{pa.grow(Math.min(4294901760,d)-Ca.byteLength+65535>>>16);Fa();var e=1;break a}catch(h){}e=void 0}if(e)return!0}return!1},G:function(a,\nb){var c=0;Wb().forEach(function(d,e){var h=b+c;e=D[a+4*e>>2>>>0]=h;for(h=0;h<d.length;++h)E[e++>>0>>>0]=d.charCodeAt(h);E[e>>0>>>0]=0;c+=d.length+1});return 0},H:function(a,b){var c=Wb();D[a>>2>>>0]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});D[b>>2>>>0]=d;return 0},E:Zb,F:function(a,b,c,d){return ec(a,b,c,d)}};\n(function(){function a(e){f.asm=e.exports;pa=f.asm.L;Fa();Ga=f.asm.S;Ia.unshift(f.asm.M);H--;f.monitorRunDependencies&&f.monitorRunDependencies(H);0==H&&(null!==Ma&&(clearInterval(Ma),Ma=null),Na&&(e=Na,Na=null,e()))}function b(e){a(e.instance)}function c(e){return Ra().then(function(h){return WebAssembly.instantiate(h,d)}).then(function(h){return h}).then(e,function(h){z(\"failed to asynchronously prepare wasm: \"+h);x(h)})}var d={a:jc};H++;f.monitorRunDependencies&&f.monitorRunDependencies(H);if(f.instantiateWasm)try{return f.instantiateWasm(d,\na)}catch(e){return z(\"Module.instantiateWasm callback failed with error: \"+e),!1}(function(){return oa||\"function\"!==typeof WebAssembly.instantiateStreaming||I.startsWith(Oa)||\"function\"!==typeof fetch?c(b):fetch(I,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(h){z(\"wasm streaming compile failed: \"+h);z(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\nf.___wasm_call_ctors=function(){return(f.___wasm_call_ctors=f.asm.M).apply(null,arguments)};f._main=function(){return(f._main=f.asm.N).apply(null,arguments)};var Db=f.___getTypeName=function(){return(Db=f.___getTypeName=f.asm.O).apply(null,arguments)};f.___embind_register_native_and_builtin_types=function(){return(f.___embind_register_native_and_builtin_types=f.asm.P).apply(null,arguments)};\nvar ic=f._malloc=function(){return(ic=f._malloc=f.asm.Q).apply(null,arguments)},W=f._free=function(){return(W=f._free=f.asm.R).apply(null,arguments)};f.dynCall_viij=function(){return(f.dynCall_viij=f.asm.T).apply(null,arguments)};f.dynCall_viiij=function(){return(f.dynCall_viiij=f.asm.U).apply(null,arguments)};f.dynCall_iiiij=function(){return(f.dynCall_iiiij=f.asm.V).apply(null,arguments)};f.dynCall_vij=function(){return(f.dynCall_vij=f.asm.W).apply(null,arguments)};\nf.dynCall_iij=function(){return(f.dynCall_iij=f.asm.X).apply(null,arguments)};f.dynCall_iiij=function(){return(f.dynCall_iiij=f.asm.Y).apply(null,arguments)};f.dynCall_iiiiij=function(){return(f.dynCall_iiiiij=f.asm.Z).apply(null,arguments)};f.dynCall_iiiiijj=function(){return(f.dynCall_iiiiijj=f.asm._).apply(null,arguments)};f.dynCall_iiiiiijj=function(){return(f.dynCall_iiiiiijj=f.asm.$).apply(null,arguments)};f.dynCall_viijii=function(){return(f.dynCall_viijii=f.asm.aa).apply(null,arguments)};\nvar kc;function ma(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}Na=function lc(){kc||mc();kc||(Na=lc)};\nfunction mc(){function a(){if(!kc&&(kc=!0,f.calledRun=!0,!qa)){Sa(Ia);Sa(Ja);aa(f);if(f.onRuntimeInitialized)f.onRuntimeInitialized();if(nc){var b=f._main;try{var c=b(0,0);if(!(noExitRuntime||0<na)){if(f.onExit)f.onExit(c);qa=!0}da(c,new ma(c))}catch(d){d instanceof ma||\"unwind\"==d||da(1,d)}finally{}}if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;)b=f.postRun.shift(),Ka.unshift(b);Sa(Ka)}}if(!(0<H)){if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)La();\nSa(Ha);0<H||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){f.setStatus(\"\")},1);a()},1)):a())}}f.run=mc;if(f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();var nc=!0;f.noInitialRun&&(nc=!1);mc();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       *\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       *\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(encrypted.instance, plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(encrypted.instance, plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: BigInt): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: BigInt) => void\n  readonly value: BigInt\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: BigInt): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: BigInt) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: BigInt) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_throws_wasm_node'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector\n  }\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","__filename","f","aa","ba","ready","Promise","a","b","w","t","hasOwnProperty","ea","ha","ia","ja","ka","ca","da","__dirname","la","require","normalize","readFileSync","buffer","Uint8Array","x","process","argv","length","replace","slice","on","ma","noExitRuntime","na","exitCode","z","exit","inspect","print","console","log","bind","oa","printErr","warn","thisProgram","quit","wasmBinary","WebAssembly","pa","qa","ra","TextDecoder","sa","c","A","d","subarray","decode","e","h","String","fromCharCode","l","ta","charCodeAt","ua","Ca","E","C","B","D","F","Da","Ea","va","wa","xa","ya","za","Aa","Ba","Fa","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","Ga","Ha","Ia","Ja","Ka","La","preRun","shift","unshift","H","Na","onAbort","RuntimeError","preloadedImages","preloadedAudios","I","Oa","startsWith","Pa","locateFile","Ra","resolve","then","Qa","Sa","ab","Ta","Ua","get","Va","this","Xa","TypeError","Ya","J","K","L","Za","$a","Function","bb","Error","name","message","stack","toString","prototype","Object","create","constructor","M","O","cb","db","P","k","m","Q","forEach","Array","push","eb","fa","fb","gb","hb","count","value","ib","FinalizationRegistry","unregister","register","jb","kb","lb","pop","R","mb","nb","ga","arguments","apply","ob","pb","qb","rb","S","sb","Wa","clone","T","tb","ub","fromWireType","vb","wb","yb","U","toWireType","zb","V","includes","concat","call","Ab","Bb","Cb","Db","W","X","map","join","Eb","Fb","Gb","p","n","r","split","Hb","Ib","Jb","Y","Lb","Z","Mb","Nb","Ob","Pb","Qb","Rb","Xb","Sb","Vb","Wb","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","$b","ac","bc","cc","dc","Date","getTime","getMonth","getFullYear","getDate","setDate","setMonth","setFullYear","ec","g","q","v","G","y","getDay","%c","%D","%F","%h","%r","%R","%T","%x","%X","%Ec","%EC","%Ex","%EX","%Ey","%EY","%Od","%Oe","%OH","%OI","%Om","%OM","%OS","%Ou","%OU","%OV","%Ow","%OW","%Oy","RegExp","u","%a","substring","%A","%b","%B","%C","%d","%e","%g","%G","%H","%I","%j","%m","%M","%n","%p","%S","%t","%u","%U","Math","ceil","%V","%w","%W","%y","%Y","%z","abs","%Z","%%","fc","set","gc","hc","Buffer","from","byteOffset","byteLength","BindingError","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","argPackAdvance","readValueFromPointer","deleteObject","xb","pointerType","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","UnboundTypeError","count_emval_handles","get_first_emval","jc","ic","N","Kb","Symbol","enumerable","configurable","defineProperty","splice","className","values","o","s","ArrayBuffer","Uint8ClampedArray","Ma","i","Ub","Tb","j","copyWithin","min","max","grow","Zb","crypto","getRandomValues","randomBytes","Yb","asm","exports","monitorRunDependencies","instance","instantiate","instantiateWasm","instantiateStreaming","fetch","credentials","catch","___wasm_call_ctors","_main","___getTypeName","___embind_register_native_and_builtin_types","kc","_malloc","_free","status","mc","calledRun","onRuntimeInitialized","nc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_iiiiij","dynCall_iiiiijj","dynCall_iiiiiijj","$","dynCall_viijii","lc","run","preInit","noInitialRun","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","[object Object]","delete","array","plainText","encode","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","unsafeInject","setType","tempArr","toArray","decodeUint32","decodeBigInt","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","capacity","reserve","size","resize","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveToArray","encoded","loadFromString","loadFromArray","cipher","copy","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","cipherText","decrypt","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","coeffModulus","setCoeffModulus","plainModulus","setPlainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","temp","encryptSerializable","encryptSymmetric","serialized","encryptSymmetricSerializable","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","encrypted","destination","negate","add","sub","multiply","square","relinKeys","relinearize","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","exponent","exponentiate","addPlain","subPlain","multiplyPlain","destinationNtt","plainTransformToNtt","cipherTransformToNtt","encryptedNtt","cipherTransformFromNtt","galoisElt","galoisKeys","applyGalois","steps","rotateRows","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","EvaluatorConstructor","ExceptionInit","_getException","getException","error","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}