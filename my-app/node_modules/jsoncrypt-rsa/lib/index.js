"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonCrypt = void 0;
var node_rsa_1 = __importDefault(require("node-rsa"));
var JsonCrypt = /** @class */ (function () {
    function JsonCrypt() {
        var _this = this;
        this.SetRsaPublicKey = function (key) {
            _this.RsaPublicKey = new node_rsa_1.default();
            _this.RsaPublicKey.importKey(key);
        };
        this.SetRsaPrivateKey = function (key) {
            _this.RsaPrivateKey = new node_rsa_1.default();
            _this.RsaPrivateKey.importKey(key);
        };
        // Value Will be Converted to String Before Encryption
        this.EncryptValue = function (t) { return _this.RsaPublicKey.encrypt(t + '', 'base64'); };
        // Value will be Retrived as String
        this.DecryptValue = function (t) { return _this.RsaPrivateKey.decrypt(t + '', 'utf8'); };
        this.EncryptJson = function (JsonObject) {
            if (!_this.RsaPublicKey)
                throw new Error("RsaPublicKey Can't Be Null");
            var EncryptedObject = {};
            var value = JSON.stringify(JsonObject);
            var FinalJsonObject = { value: value };
            // Before Encrypt The ObjStructure will be { value : JSONStringifiedString }
            Object.keys(FinalJsonObject).forEach(function (key) { return (EncryptedObject[_this.EncryptValue(key)] = _this.EncryptValue(FinalJsonObject[key])); });
            // After Encrypt The ObjStructure will be { ENC ('value') : ENC ('JSONStringifiedString') }
            return EncryptedObject;
        };
        this.DecryptJson = function (JsonObject) {
            if (!_this.RsaPrivateKey)
                throw new Error("RsaPrivateKey Can't Be Null");
            var DecryptedObject = { value: null };
            // Before Decrypt The ObjStructure will be { ENC ('value') : ENC ('JSONStringifiedString') }
            Object.keys(JsonObject).forEach(function (key) { return (DecryptedObject[_this.DecryptValue(key)] = _this.DecryptValue(JsonObject[key])); });
            // After Decrypt The ObjStructure will be { value : JSONStringifiedString }
            return JSON.parse(DecryptedObject.value);
        };
    }
    return JsonCrypt;
}());
exports.JsonCrypt = JsonCrypt;
//# sourceMappingURL=index.js.map