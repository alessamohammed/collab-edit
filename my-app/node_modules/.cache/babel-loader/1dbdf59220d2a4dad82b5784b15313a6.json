{"ast":null,"code":"/**\n * Absolute value. abs(a)==a if a>=0. abs(a)==-a if a<0\n *\n * @param a\n *\n * @returns The absolute value of a\n */\nfunction abs(a) {\n  return a >= 0 ? a : -a;\n}\n/**\n * Returns the bitlength of a number\n *\n * @param a\n * @returns The bit length\n */\n\n\nfunction bitLength(a) {\n  if (typeof a === 'number') a = BigInt(a);\n\n  if (a === 1n) {\n    return 1;\n  }\n\n  let bits = 1;\n\n  do {\n    bits++;\n  } while ((a >>= 1n) > 1n);\n\n  return bits;\n}\n/**\n * An iterative implementation of the extended euclidean algorithm or extended greatest common divisor algorithm.\n * Take positive integers a, b as input, and return a triple (g, x, y), such that ax + by = g = gcd(a, b).\n *\n * @param a\n * @param b\n *\n * @throws {RangeError}\n * This excepction is thrown if a or b are less than 0\n *\n * @returns A triple (g, x, y), such that ax + by = g = gcd(a, b).\n */\n\n\nfunction eGcd(a, b) {\n  if (typeof a === 'number') a = BigInt(a);\n  if (typeof b === 'number') b = BigInt(b);\n  if (a <= 0n || b <= 0n) throw new RangeError('a and b MUST be > 0'); // a and b MUST be positive\n\n  let x = 0n;\n  let y = 1n;\n  let u = 1n;\n  let v = 0n;\n\n  while (a !== 0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a;\n    a = r;\n    x = u;\n    y = v;\n    u = m;\n    v = n;\n  }\n\n  return {\n    g: b,\n    x: x,\n    y: y\n  };\n}\n/**\n * Greatest-common divisor of two integers based on the iterative binary algorithm.\n *\n * @param a\n * @param b\n *\n * @returns The greatest common divisor of a and b\n */\n\n\nfunction gcd(a, b) {\n  let aAbs = typeof a === 'number' ? BigInt(abs(a)) : abs(a);\n  let bAbs = typeof b === 'number' ? BigInt(abs(b)) : abs(b);\n\n  if (aAbs === 0n) {\n    return bAbs;\n  } else if (bAbs === 0n) {\n    return aAbs;\n  }\n\n  let shift = 0n;\n\n  while (((aAbs | bAbs) & 1n) === 0n) {\n    aAbs >>= 1n;\n    bAbs >>= 1n;\n    shift++;\n  }\n\n  while ((aAbs & 1n) === 0n) aAbs >>= 1n;\n\n  do {\n    while ((bAbs & 1n) === 0n) bAbs >>= 1n;\n\n    if (aAbs > bAbs) {\n      const x = aAbs;\n      aAbs = bAbs;\n      bAbs = x;\n    }\n\n    bAbs -= aAbs;\n  } while (bAbs !== 0n); // rescale\n\n\n  return aAbs << shift;\n}\n/**\n * The least common multiple computed as abs(a*b)/gcd(a,b)\n * @param a\n * @param b\n *\n * @returns The least common multiple of a and b\n */\n\n\nfunction lcm(a, b) {\n  if (typeof a === 'number') a = BigInt(a);\n  if (typeof b === 'number') b = BigInt(b);\n  if (a === 0n && b === 0n) return BigInt(0);\n  return abs(a * b) / gcd(a, b);\n}\n/**\n * Maximum. max(a,b)==a if a>=b. max(a,b)==b if a<=b\n *\n * @param a\n * @param b\n *\n * @returns Maximum of numbers a and b\n */\n\n\nfunction max(a, b) {\n  return a >= b ? a : b;\n}\n/**\n * Minimum. min(a,b)==b if a>=b. min(a,b)==a if a<=b\n *\n * @param a\n * @param b\n *\n * @returns Minimum of numbers a and b\n */\n\n\nfunction min(a, b) {\n  return a >= b ? b : a;\n}\n/**\n * Finds the smallest positive element that is congruent to a in modulo n\n *\n * @remarks\n * a and b must be the same type, either number or bigint\n *\n * @param a - An integer\n * @param n - The modulo\n *\n * @throws {RangeError}\n * Excpeption thrown when n is not > 0\n *\n * @returns A bigint with the smallest positive representation of a modulo n\n */\n\n\nfunction toZn(a, n) {\n  if (typeof a === 'number') a = BigInt(a);\n  if (typeof n === 'number') n = BigInt(n);\n\n  if (n <= 0n) {\n    throw new RangeError('n must be > 0');\n  }\n\n  const aZn = a % n;\n  return aZn < 0n ? aZn + n : aZn;\n}\n/**\n * Modular inverse.\n *\n * @param a The number to find an inverse for\n * @param n The modulo\n *\n * @throws {RangeError}\n * Excpeption thorwn when a does not have inverse modulo n\n *\n * @returns The inverse modulo n\n */\n\n\nfunction modInv(a, n) {\n  const egcd = eGcd(toZn(a, n), n);\n\n  if (egcd.g !== 1n) {\n    throw new RangeError(`${a.toString()} does not have inverse modulo ${n.toString()}`); // modular inverse does not exist\n  } else {\n    return toZn(egcd.x, n);\n  }\n}\n/**\n * Modular exponentiation b**e mod n. Currently using the right-to-left binary method\n *\n * @param b base\n * @param e exponent\n * @param n modulo\n *\n * @throws {RangeError}\n * Excpeption thrown when n is not > 0\n *\n * @returns b**e mod n\n */\n\n\nfunction modPow(b, e, n) {\n  if (typeof b === 'number') b = BigInt(b);\n  if (typeof e === 'number') e = BigInt(e);\n  if (typeof n === 'number') n = BigInt(n);\n\n  if (n <= 0n) {\n    throw new RangeError('n must be > 0');\n  } else if (n === 1n) {\n    return 0n;\n  }\n\n  b = toZn(b, n);\n\n  if (e < 0n) {\n    return modInv(modPow(b, abs(e), n), n);\n  }\n\n  let r = 1n;\n\n  while (e > 0) {\n    if (e % 2n === 1n) {\n      r = r * b % n;\n    }\n\n    e = e / 2n;\n    b = b ** 2n % n;\n  }\n\n  return r;\n}\n\nfunction fromBuffer(buf) {\n  let ret = 0n;\n\n  for (const i of buf.values()) {\n    const bi = BigInt(i);\n    ret = (ret << 8n) + bi;\n  }\n\n  return ret;\n}\n/**\n * Secure random bytes for both node and browsers. Node version uses crypto.randomBytes() and browser one self.crypto.getRandomValues()\n *\n * @param byteLength - The desired number of random bytes\n * @param forceLength - If we want to force the output to have a bit length of 8*byteLength. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * byteLength MUST be > 0\n *\n * @returns A promise that resolves to a UInt8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bytes\n */\n\n\nfunction randBytes(byteLength, forceLength = false) {\n  if (byteLength < 1) throw new RangeError('byteLength MUST be > 0');\n  return new Promise(function (resolve, reject) {\n    {\n      // browser\n      const buf = new Uint8Array(byteLength);\n      self.crypto.getRandomValues(buf); // If fixed length is required we put the first bit to 1 -> to get the necessary bitLength\n\n      if (forceLength) buf[0] = buf[0] | 128;\n      resolve(buf);\n    }\n  });\n}\n/**\n * Secure random bytes for both node and browsers. Node version uses crypto.randomFill() and browser one self.crypto.getRandomValues()\n *\n * @param byteLength - The desired number of random bytes\n * @param forceLength - If we want to force the output to have a bit length of 8*byteLength. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * byteLength MUST be > 0\n *\n * @returns A UInt8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bytes\n */\n\n\nfunction randBytesSync(byteLength, forceLength = false) {\n  if (byteLength < 1) throw new RangeError('byteLength MUST be > 0');\n  /* eslint-disable no-lone-blocks */\n\n  {\n    // browser\n    const buf = new Uint8Array(byteLength);\n    self.crypto.getRandomValues(buf); // If fixed length is required we put the first bit to 1 -> to get the necessary bitLength\n\n    if (forceLength) buf[0] = buf[0] | 128;\n    return buf;\n  }\n  /* eslint-enable no-lone-blocks */\n}\n/**\n * Secure random bits for both node and browsers. Node version uses crypto.randomFill() and browser one self.crypto.getRandomValues()\n *\n * @param bitLength - The desired number of random bits\n * @param forceLength - If we want to force the output to have a specific bit length. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A Promise that resolves to a UInt8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bits\n */\n\n\nfunction randBits(bitLength, forceLength = false) {\n  if (bitLength < 1) throw new RangeError('bitLength MUST be > 0');\n  const byteLength = Math.ceil(bitLength / 8);\n  const bitLengthMod8 = bitLength % 8;\n  return new Promise((resolve, reject) => {\n    randBytes(byteLength, false).then(function (rndBytes) {\n      if (bitLengthMod8 !== 0) {\n        // Fill with 0's the extra bits\n        rndBytes[0] = rndBytes[0] & 2 ** bitLengthMod8 - 1;\n      }\n\n      if (forceLength) {\n        const mask = bitLengthMod8 !== 0 ? 2 ** (bitLengthMod8 - 1) : 128;\n        rndBytes[0] = rndBytes[0] | mask;\n      }\n\n      resolve(rndBytes);\n    });\n  });\n}\n/**\n * Secure random bits for both node and browsers. Node version uses crypto.randomFill() and browser one self.crypto.getRandomValues()\n * @param bitLength - The desired number of random bits\n * @param forceLength - If we want to force the output to have a specific bit length. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A Uint8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bits\n */\n\n\nfunction randBitsSync(bitLength, forceLength = false) {\n  if (bitLength < 1) throw new RangeError('bitLength MUST be > 0');\n  const byteLength = Math.ceil(bitLength / 8);\n  const rndBytes = randBytesSync(byteLength, false);\n  const bitLengthMod8 = bitLength % 8;\n\n  if (bitLengthMod8 !== 0) {\n    // Fill with 0's the extra bits\n    rndBytes[0] = rndBytes[0] & 2 ** bitLengthMod8 - 1;\n  }\n\n  if (forceLength) {\n    const mask = bitLengthMod8 !== 0 ? 2 ** (bitLengthMod8 - 1) : 128;\n    rndBytes[0] = rndBytes[0] | mask;\n  }\n\n  return rndBytes;\n}\n/**\n * Returns a cryptographically secure random integer between [min,max]. Both numbers must be >=0\n * @param max Returned value will be <= max\n * @param min Returned value will be >= min\n *\n * @throws {RangeError}\n * Arguments MUST be: max > 0 && min >=0 && max > min\n *\n * @returns A cryptographically secure random bigint between [min,max]\n */\n\n\nfunction randBetween(max, min = 1n) {\n  if (max <= 0n || min < 0n || max <= min) throw new RangeError('Arguments MUST be: max > 0 && min >=0 && max > min');\n  const interval = max - min;\n  const bitLen = bitLength(interval);\n  let rnd;\n\n  do {\n    const buf = randBitsSync(bitLen);\n    rnd = fromBuffer(buf);\n  } while (rnd > interval);\n\n  return rnd + min;\n}\n\nfunction _workerUrl(workerCode) {\n  workerCode = `(() => {${workerCode}})()`; // encapsulate IIFE\n\n  const _blob = new Blob([workerCode], {\n    type: 'text/javascript'\n  });\n\n  return window.URL.createObjectURL(_blob);\n}\n\nlet _useWorkers = false; // The following is just to check whether we can use workers\n\n/* eslint-disable no-lone-blocks */\n\n{\n  // Native JS\n  if (self.Worker !== undefined) _useWorkers = true;\n}\n/**\n * The test first tries if any of the first 250 small primes are a factor of the input number and then passes several\n * iterations of Miller-Rabin Probabilistic Primality Test (FIPS 186-4 C.3.1)\n *\n * @param w - A positive integer to be tested for primality\n * @param iterations - The number of iterations for the primality test. The value shall be consistent with Table C.1, C.2 or C.3\n * @param disableWorkers - Disable the use of workers for the primality test\n *\n * @throws {RangeError}\n * w MUST be >= 0\n *\n * @returns A promise that resolves to a boolean that is either true (a probably prime number) or false (definitely composite)\n */\n\nfunction isProbablyPrime(w, iterations = 16, disableWorkers = false) {\n  if (typeof w === 'number') {\n    w = BigInt(w);\n  }\n\n  if (w < 0n) throw RangeError('w MUST be >= 0');\n  {\n    // browser\n    return new Promise((resolve, reject) => {\n      const worker = new Worker(_isProbablyPrimeWorkerUrl());\n\n      worker.onmessage = event => {\n        worker.terminate();\n        resolve(event.data.isPrime);\n      };\n\n      worker.onmessageerror = event => {\n        reject(event);\n      };\n\n      const msg = {\n        rnd: w,\n        iterations: iterations,\n        id: 0\n      };\n      worker.postMessage(msg);\n    });\n  }\n}\n\nfunction _isProbablyPrime(w, iterations) {\n  /*\n  PREFILTERING. Even values but 2 are not primes, so don't test.\n  1 is not a prime and the M-R algorithm needs w>1.\n  */\n  if (w === 2n) return true;else if ((w & 1n) === 0n || w === 1n) return false;\n  /*\n    Test if any of the first 250 small primes are a factor of w. 2 is not tested because it was already tested above.\n    */\n\n  const firstPrimes = [3n, 5n, 7n, 11n, 13n, 17n, 19n, 23n, 29n, 31n, 37n, 41n, 43n, 47n, 53n, 59n, 61n, 67n, 71n, 73n, 79n, 83n, 89n, 97n, 101n, 103n, 107n, 109n, 113n, 127n, 131n, 137n, 139n, 149n, 151n, 157n, 163n, 167n, 173n, 179n, 181n, 191n, 193n, 197n, 199n, 211n, 223n, 227n, 229n, 233n, 239n, 241n, 251n, 257n, 263n, 269n, 271n, 277n, 281n, 283n, 293n, 307n, 311n, 313n, 317n, 331n, 337n, 347n, 349n, 353n, 359n, 367n, 373n, 379n, 383n, 389n, 397n, 401n, 409n, 419n, 421n, 431n, 433n, 439n, 443n, 449n, 457n, 461n, 463n, 467n, 479n, 487n, 491n, 499n, 503n, 509n, 521n, 523n, 541n, 547n, 557n, 563n, 569n, 571n, 577n, 587n, 593n, 599n, 601n, 607n, 613n, 617n, 619n, 631n, 641n, 643n, 647n, 653n, 659n, 661n, 673n, 677n, 683n, 691n, 701n, 709n, 719n, 727n, 733n, 739n, 743n, 751n, 757n, 761n, 769n, 773n, 787n, 797n, 809n, 811n, 821n, 823n, 827n, 829n, 839n, 853n, 857n, 859n, 863n, 877n, 881n, 883n, 887n, 907n, 911n, 919n, 929n, 937n, 941n, 947n, 953n, 967n, 971n, 977n, 983n, 991n, 997n, 1009n, 1013n, 1019n, 1021n, 1031n, 1033n, 1039n, 1049n, 1051n, 1061n, 1063n, 1069n, 1087n, 1091n, 1093n, 1097n, 1103n, 1109n, 1117n, 1123n, 1129n, 1151n, 1153n, 1163n, 1171n, 1181n, 1187n, 1193n, 1201n, 1213n, 1217n, 1223n, 1229n, 1231n, 1237n, 1249n, 1259n, 1277n, 1279n, 1283n, 1289n, 1291n, 1297n, 1301n, 1303n, 1307n, 1319n, 1321n, 1327n, 1361n, 1367n, 1373n, 1381n, 1399n, 1409n, 1423n, 1427n, 1429n, 1433n, 1439n, 1447n, 1451n, 1453n, 1459n, 1471n, 1481n, 1483n, 1487n, 1489n, 1493n, 1499n, 1511n, 1523n, 1531n, 1543n, 1549n, 1553n, 1559n, 1567n, 1571n, 1579n, 1583n, 1597n];\n\n  for (let i = 0; i < firstPrimes.length && firstPrimes[i] <= w; i++) {\n    const p = firstPrimes[i];\n    if (w === p) return true;else if (w % p === 0n) return false;\n  }\n  /*\n    1. Let a be the largest integer such that 2**a divides w−1.\n    2. m = (w−1) / 2**a.\n    3. wlen = len (w).\n    4. For i = 1 to iterations do\n        4.1 Obtain a string b of wlen bits from an RBG.\n        Comment: Ensure that 1 < b < w−1.\n        4.2 If ((b ≤ 1) or (b ≥ w−1)), then go to step 4.1.\n        4.3 z = b**m mod w.\n        4.4 If ((z = 1) or (z = w − 1)), then go to step 4.7.\n        4.5 For j = 1 to a − 1 do.\n        4.5.1 z = z**2 mod w.\n        4.5.2 If (z = w−1), then go to step 4.7.\n        4.5.3 If (z = 1), then go to step 4.6.\n        4.6 Return COMPOSITE.\n        4.7 Continue.\n        Comment: Increment i for the do-loop in step 4.\n    5. Return PROBABLY PRIME.\n    */\n\n\n  let a = 0n;\n  const d = w - 1n;\n  let aux = d;\n\n  while (aux % 2n === 0n) {\n    aux /= 2n;\n    ++a;\n  }\n\n  const m = d / 2n ** a;\n\n  do {\n    const b = randBetween(d, 2n);\n    let z = modPow(b, m, w);\n    if (z === 1n || z === d) continue;\n    let j = 1;\n\n    while (j < a) {\n      z = modPow(z, 2n, w);\n      if (z === d) break;\n      if (z === 1n) return false;\n      j++;\n    }\n\n    if (z !== d) return false;\n  } while (--iterations !== 0);\n\n  return true;\n}\n\nfunction _isProbablyPrimeWorkerUrl() {\n  // Let's us first add all the required functions\n  let workerCode = `'use strict';const ${eGcd.name}=${eGcd.toString()};const ${modInv.name}=${modInv.toString()};const ${modPow.name}=${modPow.toString()};const ${toZn.name}=${toZn.toString()};const ${randBitsSync.name}=${randBitsSync.toString()};const ${randBytesSync.name}=${randBytesSync.toString()};const ${randBetween.name}=${randBetween.toString()};const ${isProbablyPrime.name}=${_isProbablyPrime.toString()};${bitLength.toString()};${fromBuffer.toString()};`;\n  workerCode += `onmessage=async function(_e){const _m={isPrime:await ${isProbablyPrime.name}(_e.data.rnd,_e.data.iterations),value:_e.data.rnd,id:_e.data.id};postMessage(_m);}`;\n  return _workerUrl(workerCode);\n}\n/**\n * A probably-prime (Miller-Rabin), cryptographically-secure, random-number generator.\n * The browser version uses web workers to parallelise prime look up. Therefore, it does not lock the UI\n * main process, and it can be much faster (if several cores or cpu are available).\n * The node version can also use worker_threads if they are available (enabled by default with Node 11 and\n * and can be enabled at runtime executing node --experimental-worker with node >=10.5.0).\n *\n * @param bitLength - The required bit length for the generated prime\n * @param iterations - The number of iterations for the Miller-Rabin Probabilistic Primality Test\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A promise that resolves to a bigint probable prime of bitLength bits.\n */\n\n\nfunction prime(bitLength, iterations = 16) {\n  if (bitLength < 1) throw new RangeError('bitLength MUST be > 0');\n  /* istanbul ignore if */\n\n  if (!_useWorkers) {\n    // If there is no support for workers\n    let rnd = 0n;\n\n    do {\n      rnd = fromBuffer(randBitsSync(bitLength, true));\n    } while (!_isProbablyPrime(rnd, iterations));\n\n    return new Promise(resolve => {\n      resolve(rnd);\n    });\n  }\n\n  return new Promise((resolve, reject) => {\n    const workerList = [];\n\n    const _onmessage = (msg, newWorker) => {\n      if (msg.isPrime) {\n        // if a prime number has been found, stop all the workers, and return it\n        for (let j = 0; j < workerList.length; j++) {\n          workerList[j].terminate();\n        }\n\n        while (workerList.length > 0) {\n          workerList.pop();\n        }\n\n        resolve(msg.value);\n      } else {\n        // if a composite is found, make the worker test another random number\n        const buf = randBitsSync(bitLength, true);\n        const rnd = fromBuffer(buf);\n\n        try {\n          const msgToWorker = {\n            rnd: rnd,\n            iterations: iterations,\n            id: msg.id\n          };\n          newWorker.postMessage(msgToWorker);\n        } catch (error) {// The worker has already terminated. There is nothing to handle here\n        }\n      }\n    };\n\n    {\n      // browser\n      const workerURL = _isProbablyPrimeWorkerUrl();\n\n      for (let i = 0; i < self.navigator.hardwareConcurrency - 1; i++) {\n        const newWorker = new Worker(workerURL);\n\n        newWorker.onmessage = event => _onmessage(event.data, newWorker);\n\n        workerList.push(newWorker);\n      }\n    }\n\n    for (let i = 0; i < workerList.length; i++) {\n      randBits(bitLength, true).then(function (buf) {\n        const rnd = fromBuffer(buf);\n        workerList[i].postMessage({\n          rnd: rnd,\n          iterations: iterations,\n          id: i\n        });\n      }).catch(reject);\n    }\n  });\n}\n/**\n * A probably-prime (Miller-Rabin), cryptographically-secure, random-number generator.\n * The sync version is NOT RECOMMENDED since it won't use workers and thus it'll be slower and may freeze thw window in browser's javascript. Please consider using prime() instead.\n *\n * @param bitLength - The required bit length for the generated prime\n * @param iterations - The number of iterations for the Miller-Rabin Probabilistic Primality Test\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A bigint probable prime of bitLength bits.\n */\n\n\nfunction primeSync(bitLength, iterations = 16) {\n  if (bitLength < 1) throw new RangeError('bitLength MUST be > 0');\n  let rnd = 0n;\n\n  do {\n    rnd = fromBuffer(randBitsSync(bitLength, true));\n  } while (!_isProbablyPrime(rnd, iterations));\n\n  return rnd;\n}\n\nexport { abs, bitLength, eGcd, gcd, isProbablyPrime, lcm, max, min, modInv, modPow, prime, primeSync, randBetween, randBits, randBitsSync, randBytes, randBytesSync, toZn };","map":{"version":3,"sources":["../../node_modules/bigint-mod-arith/dist/esm/index.browser.js","../../src/ts/fromBuffer.ts","../../src/ts/randBytes.ts","../../src/ts/randBits.ts","../../src/ts/randBetween.ts","../../src/ts/workerUtils.ts","../../src/ts/isProbablyPrime.ts","../../src/ts/prime.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Absolute value. abs(a)==a if a>=0. abs(a)==-a if a<0\n *\n * @param a\n *\n * @returns The absolute value of a\n */\nfunction abs(a) {\n    return (a >= 0) ? a : -a;\n}\n\n/**\n * Returns the bitlength of a number\n *\n * @param a\n * @returns The bit length\n */\nfunction bitLength(a) {\n    if (typeof a === 'number')\n        a = BigInt(a);\n    if (a === 1n) {\n        return 1;\n    }\n    let bits = 1;\n    do {\n        bits++;\n    } while ((a >>= 1n) > 1n);\n    return bits;\n}\n\n/**\n * An iterative implementation of the extended euclidean algorithm or extended greatest common divisor algorithm.\n * Take positive integers a, b as input, and return a triple (g, x, y), such that ax + by = g = gcd(a, b).\n *\n * @param a\n * @param b\n *\n * @throws {RangeError}\n * This excepction is thrown if a or b are less than 0\n *\n * @returns A triple (g, x, y), such that ax + by = g = gcd(a, b).\n */\nfunction eGcd(a, b) {\n    if (typeof a === 'number')\n        a = BigInt(a);\n    if (typeof b === 'number')\n        b = BigInt(b);\n    if (a <= 0n || b <= 0n)\n        throw new RangeError('a and b MUST be > 0'); // a and b MUST be positive\n    let x = 0n;\n    let y = 1n;\n    let u = 1n;\n    let v = 0n;\n    while (a !== 0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - (u * q);\n        const n = y - (v * q);\n        b = a;\n        a = r;\n        x = u;\n        y = v;\n        u = m;\n        v = n;\n    }\n    return {\n        g: b,\n        x: x,\n        y: y\n    };\n}\n\n/**\n * Greatest-common divisor of two integers based on the iterative binary algorithm.\n *\n * @param a\n * @param b\n *\n * @returns The greatest common divisor of a and b\n */\nfunction gcd(a, b) {\n    let aAbs = (typeof a === 'number') ? BigInt(abs(a)) : abs(a);\n    let bAbs = (typeof b === 'number') ? BigInt(abs(b)) : abs(b);\n    if (aAbs === 0n) {\n        return bAbs;\n    }\n    else if (bAbs === 0n) {\n        return aAbs;\n    }\n    let shift = 0n;\n    while (((aAbs | bAbs) & 1n) === 0n) {\n        aAbs >>= 1n;\n        bAbs >>= 1n;\n        shift++;\n    }\n    while ((aAbs & 1n) === 0n)\n        aAbs >>= 1n;\n    do {\n        while ((bAbs & 1n) === 0n)\n            bAbs >>= 1n;\n        if (aAbs > bAbs) {\n            const x = aAbs;\n            aAbs = bAbs;\n            bAbs = x;\n        }\n        bAbs -= aAbs;\n    } while (bAbs !== 0n);\n    // rescale\n    return aAbs << shift;\n}\n\n/**\n * The least common multiple computed as abs(a*b)/gcd(a,b)\n * @param a\n * @param b\n *\n * @returns The least common multiple of a and b\n */\nfunction lcm(a, b) {\n    if (typeof a === 'number')\n        a = BigInt(a);\n    if (typeof b === 'number')\n        b = BigInt(b);\n    if (a === 0n && b === 0n)\n        return BigInt(0);\n    return abs(a * b) / gcd(a, b);\n}\n\n/**\n * Maximum. max(a,b)==a if a>=b. max(a,b)==b if a<=b\n *\n * @param a\n * @param b\n *\n * @returns Maximum of numbers a and b\n */\nfunction max(a, b) {\n    return (a >= b) ? a : b;\n}\n\n/**\n * Minimum. min(a,b)==b if a>=b. min(a,b)==a if a<=b\n *\n * @param a\n * @param b\n *\n * @returns Minimum of numbers a and b\n */\nfunction min(a, b) {\n    return (a >= b) ? b : a;\n}\n\n/**\n * Finds the smallest positive element that is congruent to a in modulo n\n *\n * @remarks\n * a and b must be the same type, either number or bigint\n *\n * @param a - An integer\n * @param n - The modulo\n *\n * @throws {RangeError}\n * Excpeption thrown when n is not > 0\n *\n * @returns A bigint with the smallest positive representation of a modulo n\n */\nfunction toZn(a, n) {\n    if (typeof a === 'number')\n        a = BigInt(a);\n    if (typeof n === 'number')\n        n = BigInt(n);\n    if (n <= 0n) {\n        throw new RangeError('n must be > 0');\n    }\n    const aZn = a % n;\n    return (aZn < 0n) ? aZn + n : aZn;\n}\n\n/**\n * Modular inverse.\n *\n * @param a The number to find an inverse for\n * @param n The modulo\n *\n * @throws {RangeError}\n * Excpeption thorwn when a does not have inverse modulo n\n *\n * @returns The inverse modulo n\n */\nfunction modInv(a, n) {\n    const egcd = eGcd(toZn(a, n), n);\n    if (egcd.g !== 1n) {\n        throw new RangeError(`${a.toString()} does not have inverse modulo ${n.toString()}`); // modular inverse does not exist\n    }\n    else {\n        return toZn(egcd.x, n);\n    }\n}\n\n/**\n * Modular exponentiation b**e mod n. Currently using the right-to-left binary method\n *\n * @param b base\n * @param e exponent\n * @param n modulo\n *\n * @throws {RangeError}\n * Excpeption thrown when n is not > 0\n *\n * @returns b**e mod n\n */\nfunction modPow(b, e, n) {\n    if (typeof b === 'number')\n        b = BigInt(b);\n    if (typeof e === 'number')\n        e = BigInt(e);\n    if (typeof n === 'number')\n        n = BigInt(n);\n    if (n <= 0n) {\n        throw new RangeError('n must be > 0');\n    }\n    else if (n === 1n) {\n        return 0n;\n    }\n    b = toZn(b, n);\n    if (e < 0n) {\n        return modInv(modPow(b, abs(e), n), n);\n    }\n    let r = 1n;\n    while (e > 0) {\n        if ((e % 2n) === 1n) {\n            r = r * b % n;\n        }\n        e = e / 2n;\n        b = b ** 2n % n;\n    }\n    return r;\n}\n\nfunction fromBuffer(buf) {\n    let ret = 0n;\n    for (const i of buf.values()) {\n        const bi = BigInt(i);\n        ret = (ret << 8n) + bi;\n    }\n    return ret;\n}\n\n/**\n * Secure random bytes for both node and browsers. Node version uses crypto.randomBytes() and browser one self.crypto.getRandomValues()\n *\n * @param byteLength - The desired number of random bytes\n * @param forceLength - If we want to force the output to have a bit length of 8*byteLength. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * byteLength MUST be > 0\n *\n * @returns A promise that resolves to a UInt8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bytes\n */\nfunction randBytes(byteLength, forceLength = false) {\n    if (byteLength < 1)\n        throw new RangeError('byteLength MUST be > 0');\n    return new Promise(function (resolve, reject) {\n        { // browser\n            const buf = new Uint8Array(byteLength);\n            self.crypto.getRandomValues(buf);\n            // If fixed length is required we put the first bit to 1 -> to get the necessary bitLength\n            if (forceLength)\n                buf[0] = buf[0] | 128;\n            resolve(buf);\n        }\n    });\n}\n/**\n * Secure random bytes for both node and browsers. Node version uses crypto.randomFill() and browser one self.crypto.getRandomValues()\n *\n * @param byteLength - The desired number of random bytes\n * @param forceLength - If we want to force the output to have a bit length of 8*byteLength. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * byteLength MUST be > 0\n *\n * @returns A UInt8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bytes\n */\nfunction randBytesSync(byteLength, forceLength = false) {\n    if (byteLength < 1)\n        throw new RangeError('byteLength MUST be > 0');\n    /* eslint-disable no-lone-blocks */\n    { // browser\n        const buf = new Uint8Array(byteLength);\n        self.crypto.getRandomValues(buf);\n        // If fixed length is required we put the first bit to 1 -> to get the necessary bitLength\n        if (forceLength)\n            buf[0] = buf[0] | 128;\n        return buf;\n    }\n    /* eslint-enable no-lone-blocks */\n}\n\n/**\n * Secure random bits for both node and browsers. Node version uses crypto.randomFill() and browser one self.crypto.getRandomValues()\n *\n * @param bitLength - The desired number of random bits\n * @param forceLength - If we want to force the output to have a specific bit length. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A Promise that resolves to a UInt8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bits\n */\nfunction randBits(bitLength, forceLength = false) {\n    if (bitLength < 1)\n        throw new RangeError('bitLength MUST be > 0');\n    const byteLength = Math.ceil(bitLength / 8);\n    const bitLengthMod8 = bitLength % 8;\n    return new Promise((resolve, reject) => {\n        randBytes(byteLength, false).then(function (rndBytes) {\n            if (bitLengthMod8 !== 0) {\n                // Fill with 0's the extra bits\n                rndBytes[0] = rndBytes[0] & (2 ** bitLengthMod8 - 1);\n            }\n            if (forceLength) {\n                const mask = (bitLengthMod8 !== 0) ? 2 ** (bitLengthMod8 - 1) : 128;\n                rndBytes[0] = rndBytes[0] | mask;\n            }\n            resolve(rndBytes);\n        });\n    });\n}\n/**\n * Secure random bits for both node and browsers. Node version uses crypto.randomFill() and browser one self.crypto.getRandomValues()\n * @param bitLength - The desired number of random bits\n * @param forceLength - If we want to force the output to have a specific bit length. It basically forces the msb to be 1\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A Uint8Array/Buffer (Browser/Node.js) filled with cryptographically secure random bits\n */\nfunction randBitsSync(bitLength, forceLength = false) {\n    if (bitLength < 1)\n        throw new RangeError('bitLength MUST be > 0');\n    const byteLength = Math.ceil(bitLength / 8);\n    const rndBytes = randBytesSync(byteLength, false);\n    const bitLengthMod8 = bitLength % 8;\n    if (bitLengthMod8 !== 0) {\n        // Fill with 0's the extra bits\n        rndBytes[0] = rndBytes[0] & (2 ** bitLengthMod8 - 1);\n    }\n    if (forceLength) {\n        const mask = (bitLengthMod8 !== 0) ? 2 ** (bitLengthMod8 - 1) : 128;\n        rndBytes[0] = rndBytes[0] | mask;\n    }\n    return rndBytes;\n}\n\n/**\n * Returns a cryptographically secure random integer between [min,max]. Both numbers must be >=0\n * @param max Returned value will be <= max\n * @param min Returned value will be >= min\n *\n * @throws {RangeError}\n * Arguments MUST be: max > 0 && min >=0 && max > min\n *\n * @returns A cryptographically secure random bigint between [min,max]\n */\nfunction randBetween(max, min = 1n) {\n    if (max <= 0n || min < 0n || max <= min)\n        throw new RangeError('Arguments MUST be: max > 0 && min >=0 && max > min');\n    const interval = max - min;\n    const bitLen = bitLength(interval);\n    let rnd;\n    do {\n        const buf = randBitsSync(bitLen);\n        rnd = fromBuffer(buf);\n    } while (rnd > interval);\n    return rnd + min;\n}\n\nfunction _workerUrl(workerCode) {\n    workerCode = `(() => {${workerCode}})()`; // encapsulate IIFE\n    const _blob = new Blob([workerCode], { type: 'text/javascript' });\n    return window.URL.createObjectURL(_blob);\n}\nlet _useWorkers = false; // The following is just to check whether we can use workers\n/* eslint-disable no-lone-blocks */\n{ // Native JS\n    if (self.Worker !== undefined)\n        _useWorkers = true;\n}\n\n/**\n * The test first tries if any of the first 250 small primes are a factor of the input number and then passes several\n * iterations of Miller-Rabin Probabilistic Primality Test (FIPS 186-4 C.3.1)\n *\n * @param w - A positive integer to be tested for primality\n * @param iterations - The number of iterations for the primality test. The value shall be consistent with Table C.1, C.2 or C.3\n * @param disableWorkers - Disable the use of workers for the primality test\n *\n * @throws {RangeError}\n * w MUST be >= 0\n *\n * @returns A promise that resolves to a boolean that is either true (a probably prime number) or false (definitely composite)\n */\nfunction isProbablyPrime(w, iterations = 16, disableWorkers = false) {\n    if (typeof w === 'number') {\n        w = BigInt(w);\n    }\n    if (w < 0n)\n        throw RangeError('w MUST be >= 0');\n    { // browser\n        return new Promise((resolve, reject) => {\n            const worker = new Worker(_isProbablyPrimeWorkerUrl());\n            worker.onmessage = (event) => {\n                worker.terminate();\n                resolve(event.data.isPrime);\n            };\n            worker.onmessageerror = (event) => {\n                reject(event);\n            };\n            const msg = {\n                rnd: w,\n                iterations: iterations,\n                id: 0\n            };\n            worker.postMessage(msg);\n        });\n    }\n}\nfunction _isProbablyPrime(w, iterations) {\n    /*\n    PREFILTERING. Even values but 2 are not primes, so don't test.\n    1 is not a prime and the M-R algorithm needs w>1.\n    */\n    if (w === 2n)\n        return true;\n    else if ((w & 1n) === 0n || w === 1n)\n        return false;\n    /*\n      Test if any of the first 250 small primes are a factor of w. 2 is not tested because it was already tested above.\n      */\n    const firstPrimes = [\n        3n,\n        5n,\n        7n,\n        11n,\n        13n,\n        17n,\n        19n,\n        23n,\n        29n,\n        31n,\n        37n,\n        41n,\n        43n,\n        47n,\n        53n,\n        59n,\n        61n,\n        67n,\n        71n,\n        73n,\n        79n,\n        83n,\n        89n,\n        97n,\n        101n,\n        103n,\n        107n,\n        109n,\n        113n,\n        127n,\n        131n,\n        137n,\n        139n,\n        149n,\n        151n,\n        157n,\n        163n,\n        167n,\n        173n,\n        179n,\n        181n,\n        191n,\n        193n,\n        197n,\n        199n,\n        211n,\n        223n,\n        227n,\n        229n,\n        233n,\n        239n,\n        241n,\n        251n,\n        257n,\n        263n,\n        269n,\n        271n,\n        277n,\n        281n,\n        283n,\n        293n,\n        307n,\n        311n,\n        313n,\n        317n,\n        331n,\n        337n,\n        347n,\n        349n,\n        353n,\n        359n,\n        367n,\n        373n,\n        379n,\n        383n,\n        389n,\n        397n,\n        401n,\n        409n,\n        419n,\n        421n,\n        431n,\n        433n,\n        439n,\n        443n,\n        449n,\n        457n,\n        461n,\n        463n,\n        467n,\n        479n,\n        487n,\n        491n,\n        499n,\n        503n,\n        509n,\n        521n,\n        523n,\n        541n,\n        547n,\n        557n,\n        563n,\n        569n,\n        571n,\n        577n,\n        587n,\n        593n,\n        599n,\n        601n,\n        607n,\n        613n,\n        617n,\n        619n,\n        631n,\n        641n,\n        643n,\n        647n,\n        653n,\n        659n,\n        661n,\n        673n,\n        677n,\n        683n,\n        691n,\n        701n,\n        709n,\n        719n,\n        727n,\n        733n,\n        739n,\n        743n,\n        751n,\n        757n,\n        761n,\n        769n,\n        773n,\n        787n,\n        797n,\n        809n,\n        811n,\n        821n,\n        823n,\n        827n,\n        829n,\n        839n,\n        853n,\n        857n,\n        859n,\n        863n,\n        877n,\n        881n,\n        883n,\n        887n,\n        907n,\n        911n,\n        919n,\n        929n,\n        937n,\n        941n,\n        947n,\n        953n,\n        967n,\n        971n,\n        977n,\n        983n,\n        991n,\n        997n,\n        1009n,\n        1013n,\n        1019n,\n        1021n,\n        1031n,\n        1033n,\n        1039n,\n        1049n,\n        1051n,\n        1061n,\n        1063n,\n        1069n,\n        1087n,\n        1091n,\n        1093n,\n        1097n,\n        1103n,\n        1109n,\n        1117n,\n        1123n,\n        1129n,\n        1151n,\n        1153n,\n        1163n,\n        1171n,\n        1181n,\n        1187n,\n        1193n,\n        1201n,\n        1213n,\n        1217n,\n        1223n,\n        1229n,\n        1231n,\n        1237n,\n        1249n,\n        1259n,\n        1277n,\n        1279n,\n        1283n,\n        1289n,\n        1291n,\n        1297n,\n        1301n,\n        1303n,\n        1307n,\n        1319n,\n        1321n,\n        1327n,\n        1361n,\n        1367n,\n        1373n,\n        1381n,\n        1399n,\n        1409n,\n        1423n,\n        1427n,\n        1429n,\n        1433n,\n        1439n,\n        1447n,\n        1451n,\n        1453n,\n        1459n,\n        1471n,\n        1481n,\n        1483n,\n        1487n,\n        1489n,\n        1493n,\n        1499n,\n        1511n,\n        1523n,\n        1531n,\n        1543n,\n        1549n,\n        1553n,\n        1559n,\n        1567n,\n        1571n,\n        1579n,\n        1583n,\n        1597n\n    ];\n    for (let i = 0; i < firstPrimes.length && (firstPrimes[i] <= w); i++) {\n        const p = firstPrimes[i];\n        if (w === p)\n            return true;\n        else if (w % p === 0n)\n            return false;\n    }\n    /*\n      1. Let a be the largest integer such that 2**a divides w−1.\n      2. m = (w−1) / 2**a.\n      3. wlen = len (w).\n      4. For i = 1 to iterations do\n          4.1 Obtain a string b of wlen bits from an RBG.\n          Comment: Ensure that 1 < b < w−1.\n          4.2 If ((b ≤ 1) or (b ≥ w−1)), then go to step 4.1.\n          4.3 z = b**m mod w.\n          4.4 If ((z = 1) or (z = w − 1)), then go to step 4.7.\n          4.5 For j = 1 to a − 1 do.\n          4.5.1 z = z**2 mod w.\n          4.5.2 If (z = w−1), then go to step 4.7.\n          4.5.3 If (z = 1), then go to step 4.6.\n          4.6 Return COMPOSITE.\n          4.7 Continue.\n          Comment: Increment i for the do-loop in step 4.\n      5. Return PROBABLY PRIME.\n      */\n    let a = 0n;\n    const d = w - 1n;\n    let aux = d;\n    while (aux % 2n === 0n) {\n        aux /= 2n;\n        ++a;\n    }\n    const m = d / (2n ** a);\n    do {\n        const b = randBetween(d, 2n);\n        let z = modPow(b, m, w);\n        if (z === 1n || z === d)\n            continue;\n        let j = 1;\n        while (j < a) {\n            z = modPow(z, 2n, w);\n            if (z === d)\n                break;\n            if (z === 1n)\n                return false;\n            j++;\n        }\n        if (z !== d)\n            return false;\n    } while (--iterations !== 0);\n    return true;\n}\nfunction _isProbablyPrimeWorkerUrl() {\n    // Let's us first add all the required functions\n    let workerCode = `'use strict';const ${eGcd.name}=${eGcd.toString()};const ${modInv.name}=${modInv.toString()};const ${modPow.name}=${modPow.toString()};const ${toZn.name}=${toZn.toString()};const ${randBitsSync.name}=${randBitsSync.toString()};const ${randBytesSync.name}=${randBytesSync.toString()};const ${randBetween.name}=${randBetween.toString()};const ${isProbablyPrime.name}=${_isProbablyPrime.toString()};${bitLength.toString()};${fromBuffer.toString()};`;\n    workerCode += `onmessage=async function(_e){const _m={isPrime:await ${isProbablyPrime.name}(_e.data.rnd,_e.data.iterations),value:_e.data.rnd,id:_e.data.id};postMessage(_m);}`;\n    return _workerUrl(workerCode);\n}\n\n/**\n * A probably-prime (Miller-Rabin), cryptographically-secure, random-number generator.\n * The browser version uses web workers to parallelise prime look up. Therefore, it does not lock the UI\n * main process, and it can be much faster (if several cores or cpu are available).\n * The node version can also use worker_threads if they are available (enabled by default with Node 11 and\n * and can be enabled at runtime executing node --experimental-worker with node >=10.5.0).\n *\n * @param bitLength - The required bit length for the generated prime\n * @param iterations - The number of iterations for the Miller-Rabin Probabilistic Primality Test\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A promise that resolves to a bigint probable prime of bitLength bits.\n */\nfunction prime(bitLength, iterations = 16) {\n    if (bitLength < 1)\n        throw new RangeError('bitLength MUST be > 0');\n    /* istanbul ignore if */\n    if (!_useWorkers) { // If there is no support for workers\n        let rnd = 0n;\n        do {\n            rnd = fromBuffer(randBitsSync(bitLength, true));\n        } while (!_isProbablyPrime(rnd, iterations));\n        return new Promise((resolve) => { resolve(rnd); });\n    }\n    return new Promise((resolve, reject) => {\n        const workerList = [];\n        const _onmessage = (msg, newWorker) => {\n            if (msg.isPrime) {\n                // if a prime number has been found, stop all the workers, and return it\n                for (let j = 0; j < workerList.length; j++) {\n                    workerList[j].terminate();\n                }\n                while (workerList.length > 0) {\n                    workerList.pop();\n                }\n                resolve(msg.value);\n            }\n            else { // if a composite is found, make the worker test another random number\n                const buf = randBitsSync(bitLength, true);\n                const rnd = fromBuffer(buf);\n                try {\n                    const msgToWorker = {\n                        rnd: rnd,\n                        iterations: iterations,\n                        id: msg.id\n                    };\n                    newWorker.postMessage(msgToWorker);\n                }\n                catch (error) {\n                    // The worker has already terminated. There is nothing to handle here\n                }\n            }\n        };\n        { // browser\n            const workerURL = _isProbablyPrimeWorkerUrl();\n            for (let i = 0; i < self.navigator.hardwareConcurrency - 1; i++) {\n                const newWorker = new Worker(workerURL);\n                newWorker.onmessage = (event) => _onmessage(event.data, newWorker);\n                workerList.push(newWorker);\n            }\n        }\n        for (let i = 0; i < workerList.length; i++) {\n            randBits(bitLength, true).then(function (buf) {\n                const rnd = fromBuffer(buf);\n                workerList[i].postMessage({\n                    rnd: rnd,\n                    iterations: iterations,\n                    id: i\n                });\n            }).catch(reject);\n        }\n    });\n}\n/**\n * A probably-prime (Miller-Rabin), cryptographically-secure, random-number generator.\n * The sync version is NOT RECOMMENDED since it won't use workers and thus it'll be slower and may freeze thw window in browser's javascript. Please consider using prime() instead.\n *\n * @param bitLength - The required bit length for the generated prime\n * @param iterations - The number of iterations for the Miller-Rabin Probabilistic Primality Test\n *\n * @throws {RangeError}\n * bitLength MUST be > 0\n *\n * @returns A bigint probable prime of bitLength bits.\n */\nfunction primeSync(bitLength, iterations = 16) {\n    if (bitLength < 1)\n        throw new RangeError('bitLength MUST be > 0');\n    let rnd = 0n;\n    do {\n        rnd = fromBuffer(randBitsSync(bitLength, true));\n    } while (!_isProbablyPrime(rnd, iterations));\n    return rnd;\n}\n\nexport { abs, bitLength, eGcd, gcd, isProbablyPrime, lcm, max, min, modInv, modPow, prime, primeSync, randBetween, randBits, randBitsSync, randBytes, randBytesSync, toZn };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]},"metadata":{},"sourceType":"module"}